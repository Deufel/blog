@layer openprops, openprops.color, normalize, OPUIutils, theme, layout.desktop, layout.print, components.base, components.has-deps, components.semantic, transition, utils;

/* OPEN PROPS */
@layer openprops {
    :where(:root) {
        --font-sans:
            system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell,
            Noto Sans, sans-serif;
        --font-serif: ui-serif, serif;
        --font-mono:
            Dank Mono, Operator Mono, Inconsolata, Fira Mono, ui-monospace,
            SF Mono, Monaco, Droid Sans Mono, Source Code Pro, monospace;
        --font-weight-1: 100;
        --font-weight-2: 200;
        --font-weight-3: 300;
        --font-weight-4: 400;
        --font-weight-5: 500;
        --font-weight-6: 600;
        --font-weight-7: 700;
        --font-weight-8: 800;
        --font-weight-9: 900;
        --font-size-00: 0.5rem;
        --font-size-0: 0.75rem;
        --font-size-1: 1rem;
        --font-size-2: 1.1rem;
        --font-size-3: 1.25rem;
        --font-size-4: 1.5rem;
        --font-size-5: 2rem;
        --font-size-6: 2.5rem;
        --font-size-7: 3rem;
        --font-size-8: 3.5rem;
        --font-size-fluid-0: clamp(0.75rem, 2vw, 1rem);
        --font-size-fluid-0: clamp(0.75rem, 2vw, 1rem);
        --font-size-fluid-1: clamp(1rem, 4vw, 1.5rem);
        --font-size-fluid-2: clamp(1.5rem, 6vw, 2.5rem);
        --font-size-fluid-3: clamp(2rem, 9vw, 3.5rem);
        --size-000: -0.5rem;
        --size-00: -0.25rem;
        --size-1: 0.25rem;
        --size-2: 0.5rem;
        --size-3: 1rem;
        --size-4: 1.25rem;
        --size-5: 1.5rem;
        --size-6: 1.75rem;
        --size-7: 2rem;
        --size-8: 3rem;
        --size-9: 4rem;
        --size-10: 5rem;
        --size-11: 7.5rem;
        --size-12: 10rem;
        --size-13: 15rem;
        --size-14: 20rem;
        --size-15: 30rem;
        --size-fluid-00: clamp(0rem, 0.25vw, 0.25rem);
        --size-fluid-0: clamp(0.25rem, 0.5vw, 0.5rem);
        --size-fluid-1: clamp(0.5rem, 1vw, 1rem);
        --size-fluid-2: clamp(1rem, 2vw, 1.5rem);
        --size-fluid-3: clamp(1.5rem, 3vw, 2rem);
        --size-fluid-4: clamp(2rem, 4vw, 3rem);
        --size-fluid-5: clamp(4rem, 5vw, 5rem);
        --size-fluid-6: clamp(5rem, 7vw, 7.5rem);
        --size-fluid-7: clamp(7.5rem, 10vw, 10rem);
        --size-fluid-8: clamp(10rem, 20vw, 15rem);
        --size-fluid-9: clamp(15rem, 30vw, 20rem);
        --size-fluid-10: clamp(20rem, 40vw, 30rem);
        --size-header-1: 20ch;
        --size-header-2: 25ch;
        --size-header-3: 35ch;
        --size-content-1: 20ch;
        --size-content-2: 45ch;
        --size-content-3: 60ch;
        --ratio-square: 1;
        --ratio-landscape: 4/3;
        --ratio-portrait: 3/4;
        --ratio-widescreen: 16/9;
        --ratio-ultrawide: 18/5;
        --ratio-golden: 1.618/1;
        --layer-1: 1;
        --layer-2: 2;
        --layer-3: 3;
        --layer-4: 4;
        --layer-5: 5;
        --layer-bottom: var(--layer-1);
        --layer-top: var(--layer-5);
        --layer-important: 2147480000;
        --border-size-1: 1px;
        --border-size-2: 2px;
        --border-size-3: 5px;
        --border-size-4: 10px;
        --border-size-5: 25px;
        --radius-1: 2px;
        --radius-2: 5px;
        --radius-3: 1rem;
        --radius-4: 2rem;
        --radius-5: 4rem;
        --radius-6: 8rem;
        --radius-round: 100000px;
        --radius-blob-1: 30% 70% 70% 30%/53% 30% 70% 47%;
        --radius-blob-2: 53% 47% 34% 66%/63% 46% 54% 37%;
        --radius-blob-3: 37% 63% 56% 44%/49% 56% 44% 51%;
        --radius-blob-4: 63% 37% 37% 63%/43% 37% 63% 57%;
        --radius-blob-5: 49% 51% 48% 52%/57% 44% 56% 43%;
        --radius-conditional-1: clamp(
            0px,
            calc(100vw - 100%) * 100000,
            var(--radius-1)
        );
        --radius-conditional-2: clamp(
            0px,
            calc(100vw - 100%) * 100000,
            var(--radius-2)
        );
        --radius-conditional-3: clamp(
            0px,
            calc(100vw - 100%) * 100000,
            var(--radius-3)
        );
        --radius-conditional-4: clamp(
            0px,
            calc(100vw - 100%) * 100000,
            var(--radius-4)
        );
        --radius-conditional-5: clamp(
            0px,
            calc(100vw - 100%) * 100000,
            var(--radius-5)
        );
        --radius-conditional-6: clamp(
            0px,
            calc(100vw - 100%) * 100000,
            var(--radius-6)
        );
    }
    * {
        --shadow-strength: 1%;
        --shadow-chroma: 3%;
        --shadow-hue: var(--shadow-tint, var(--palette-hue));
        --shadow-color: 15% var(--shadow-chroma) var(--shadow-hue);
        --inner-shadow-highlight:
            inset 0 -0.5px 0 0 #fff, inset 0 0.5px 0 0 #0001;
        --shadow-1: 0 1px 2px -1px
            oklch(var(--shadow-color) / calc(var(--shadow-strength) + 9%));
        --shadow-2:
            0 3px 5px -2px
                oklch(var(--shadow-color) / calc(var(--shadow-strength) + 3%)),
            0 7px 14px -5px
                oklch(var(--shadow-color) / calc(var(--shadow-strength) + 5%));
        --shadow-3:
            0 -1px 3px 0
                oklch(var(--shadow-color) / calc(var(--shadow-strength) + 2%)),
            0 1px 2px -5px
                oklch(var(--shadow-color) / calc(var(--shadow-strength) + 2%)),
            0 2px 5px -5px
                oklch(var(--shadow-color) / calc(var(--shadow-strength) + 4%)),
            0 4px 12px -5px
                oklch(var(--shadow-color) / calc(var(--shadow-strength) + 5%)),
            0 12px 15px -5px
                oklch(var(--shadow-color) / calc(var(--shadow-strength) + 7%));
        --shadow-4:
            0 -2px 5px 0
                oklch(var(--shadow-color) / calc(var(--shadow-strength) + 2%)),
            0 1px 1px -2px
                oklch(var(--shadow-color) / calc(var(--shadow-strength) + 3%)),
            0 2px 2px -2px
                oklch(var(--shadow-color) / calc(var(--shadow-strength) + 3%)),
            0 5px 5px -2px
                oklch(var(--shadow-color) / calc(var(--shadow-strength) + 4%)),
            0 9px 9px -2px
                oklch(var(--shadow-color) / calc(var(--shadow-strength) + 5%)),
            0 16px 16px -2px
                oklch(var(--shadow-color) / calc(var(--shadow-strength) + 6%));
        --shadow-5:
            0 -1px 2px 0
                oklch(var(--shadow-color) / calc(var(--shadow-strength) + 2%)),
            0 2px 1px -2px
                oklch(var(--shadow-color) / calc(var(--shadow-strength) + 3%)),
            0 5px 5px -2px
                oklch(var(--shadow-color) / calc(var(--shadow-strength) + 3%)),
            0 10px 10px -2px
                oklch(var(--shadow-color) / calc(var(--shadow-strength) + 4%)),
            0 20px 20px -2px
                oklch(var(--shadow-color) / calc(var(--shadow-strength) + 5%)),
            0 40px 40px -2px
                oklch(var(--shadow-color) / calc(var(--shadow-strength) + 7%));
        --shadow-6:
            0 -1px 2px 0
                oklch(var(--shadow-color) / calc(var(--shadow-strength) + 2%)),
            0 3px 2px -2px
                oklch(var(--shadow-color) / calc(var(--shadow-strength) + 3%)),
            0 7px 5px -2px
                oklch(var(--shadow-color) / calc(var(--shadow-strength) + 3%)),
            0 12px 10px -2px
                oklch(var(--shadow-color) / calc(var(--shadow-strength) + 4%)),
            0 22px 18px -2px
                oklch(var(--shadow-color) / calc(var(--shadow-strength) + 5%)),
            0 41px 33px -2px
                oklch(var(--shadow-color) / calc(var(--shadow-strength) + 6%)),
            0 100px 80px -2px
                oklch(var(--shadow-color) / calc(var(--shadow-strength) + 7%));
        --inner-shadow-0: inset 0 0 0 1px
            oklch(var(--shadow-color) / calc(var(--shadow-strength) + 9%));
        --inner-shadow-1:
            inset 0 1px 2px 0
                oklch(var(--shadow-color) / calc(var(--shadow-strength) + 9%)),
            var(--inner-shadow-highlight);
        --inner-shadow-2:
            inset 0 1px 4px 0
                oklch(var(--shadow-color) / calc(var(--shadow-strength) + 9%)),
            var(--inner-shadow-highlight);
        --inner-shadow-3:
            inset 0 2px 8px 0
                oklch(var(--shadow-color) / calc(var(--shadow-strength) + 9%)),
            var(--inner-shadow-highlight);
        --inner-shadow-4:
            inset 0 2px 14px 0
                oklch(var(--shadow-color) / calc(var(--shadow-strength) + 9%)),
            var(--inner-shadow-highlight);
    }
    @media (prefers-color-scheme: dark) {
        * {
            --shadow-strength: 25%;
            --shadow-chroma: 10%;
            --shadow-hue: var(--shadow-tint, var(--palette-hue));
            --shadow-color: 15% var(--shadow-chroma) var(--shadow-hue);
            --inner-shadow-highlight:
                inset 0 -0.5px 0 0 #fff1, inset 0 0.5px 0 0 #0007;
        }
    }
    :where(:root) {
        --ease-1: cubic-bezier(0.25, 0, 0.5, 1);
        --ease-2: cubic-bezier(0.25, 0, 0.4, 1);
        --ease-3: cubic-bezier(0.25, 0, 0.3, 1);
        --ease-4: cubic-bezier(0.25, 0, 0.2, 1);
        --ease-5: cubic-bezier(0.25, 0, 0.1, 1);
        --ease-in-1: cubic-bezier(0.25, 0, 1, 1);
        --ease-in-2: cubic-bezier(0.5, 0, 1, 1);
        --ease-in-3: cubic-bezier(0.7, 0, 1, 1);
        --ease-in-4: cubic-bezier(0.9, 0, 1, 1);
        --ease-in-5: cubic-bezier(1, 0, 1, 1);
        --ease-out-1: cubic-bezier(0, 0, 0.75, 1);
        --ease-out-2: cubic-bezier(0, 0, 0.5, 1);
        --ease-out-3: cubic-bezier(0, 0, 0.3, 1);
        --ease-out-4: cubic-bezier(0, 0, 0.1, 1);
        --ease-out-5: cubic-bezier(0, 0, 0, 1);
        --ease-in-out-1: cubic-bezier(0.1, 0, 0.9, 1);
        --ease-in-out-2: cubic-bezier(0.3, 0, 0.7, 1);
        --ease-in-out-3: cubic-bezier(0.5, 0, 0.5, 1);
        --ease-in-out-4: cubic-bezier(0.7, 0, 0.3, 1);
        --ease-in-out-5: cubic-bezier(0.9, 0, 0.1, 1);
        --ease-elastic-out-1: cubic-bezier(0.5, 0.75, 0.75, 1.25);
        --ease-elastic-out-2: cubic-bezier(0.5, 1, 0.75, 1.25);
        --ease-elastic-out-3: cubic-bezier(0.5, 1.25, 0.75, 1.25);
        --ease-elastic-out-4: cubic-bezier(0.5, 1.5, 0.75, 1.25);
        --ease-elastic-out-5: cubic-bezier(0.5, 1.75, 0.75, 1.25);
        --ease-elastic-in-1: cubic-bezier(0.5, -0.25, 0.75, 1);
        --ease-elastic-in-2: cubic-bezier(0.5, -0.5, 0.75, 1);
        --ease-elastic-in-3: cubic-bezier(0.5, -0.75, 0.75, 1);
        --ease-elastic-in-4: cubic-bezier(0.5, -1, 0.75, 1);
        --ease-elastic-in-5: cubic-bezier(0.5, -1.25, 0.75, 1);
        --ease-elastic-in-out-1: cubic-bezier(0.5, -0.1, 0.1, 1.5);
        --ease-elastic-in-out-2: cubic-bezier(0.5, -0.3, 0.1, 1.5);
        --ease-elastic-in-out-3: cubic-bezier(0.5, -0.5, 0.1, 1.5);
        --ease-elastic-in-out-4: cubic-bezier(0.5, -0.7, 0.1, 1.5);
        --ease-elastic-in-out-5: cubic-bezier(0.5, -0.9, 0.1, 1.5);
        --ease-step-1: steps(2);
        --ease-step-2: steps(3);
        --ease-step-3: steps(4);
        --ease-step-4: steps(7);
        --ease-step-5: steps(10);
        --ease-spring-1: linear(
            0,
            0.006,
            0.025 2.8%,
            0.101 6.1%,
            0.539 18.9%,
            0.721 25.3%,
            0.849 31.5%,
            0.937 38.1%,
            0.968 41.8%,
            0.991 45.7%,
            1.006 50.1%,
            1.015 55%,
            1.017 63.9%,
            1.001
        );
        --ease-spring-2: linear(
            0,
            0.007,
            0.029 2.2%,
            0.118 4.7%,
            0.625 14.4%,
            0.826 19%,
            0.902,
            0.962,
            1.008 26.1%,
            1.041 28.7%,
            1.064 32.1%,
            1.07 36%,
            1.061 40.5%,
            1.015 53.4%,
            0.999 61.6%,
            0.995 71.2%,
            1
        );
        --ease-spring-3: linear(
            0,
            0.009,
            0.035 2.1%,
            0.141 4.4%,
            0.723 12.9%,
            0.938 16.7%,
            1.017,
            1.077,
            1.121,
            1.149 24.3%,
            1.159,
            1.163,
            1.161,
            1.154 29.9%,
            1.129 32.8%,
            1.051 39.6%,
            1.017 43.1%,
            0.991,
            0.977 51%,
            0.974 53.8%,
            0.975 57.1%,
            0.997 69.8%,
            1.003 76.9%,
            1
        );
        --ease-spring-4: linear(
            0,
            0.009,
            0.037 1.7%,
            0.153 3.6%,
            0.776 10.3%,
            1.001,
            1.142 16%,
            1.185,
            1.209 19%,
            1.215 19.9% 20.8%,
            1.199,
            1.165 25%,
            1.056 30.3%,
            1.008 33%,
            0.973,
            0.955 39.2%,
            0.953 41.1%,
            0.957 43.3%,
            0.998 53.3%,
            1.009 59.1% 63.7%,
            0.998 78.9%,
            1
        );
        --ease-spring-5: linear(
            0,
            0.01,
            0.04 1.6%,
            0.161 3.3%,
            0.816 9.4%,
            1.046,
            1.189 14.4%,
            1.231,
            1.254 17%,
            1.259,
            1.257 18.6%,
            1.236,
            1.194 22.3%,
            1.057 27%,
            0.999 29.4%,
            0.955 32.1%,
            0.942,
            0.935 34.9%,
            0.933,
            0.939 38.4%,
            1 47.3%,
            1.011,
            1.017 52.6%,
            1.016 56.4%,
            1 65.2%,
            0.996 70.2%,
            1.001 87.2%,
            1
        );
        --ease-bounce-1: linear(
            0,
            0.004,
            0.016,
            0.035,
            0.063,
            0.098,
            0.141,
            0.191,
            0.25,
            0.316,
            0.391 36.8%,
            0.563,
            0.766,
            1 58.8%,
            0.946,
            0.908 69.1%,
            0.895,
            0.885,
            0.879,
            0.878,
            0.879,
            0.885,
            0.895,
            0.908 89.7%,
            0.946,
            1
        );
        --ease-bounce-2: linear(
            0,
            0.004,
            0.016,
            0.035,
            0.063,
            0.098,
            0.141 15.1%,
            0.25,
            0.391,
            0.562,
            0.765,
            1,
            0.892 45.2%,
            0.849,
            0.815,
            0.788,
            0.769,
            0.757,
            0.753,
            0.757,
            0.769,
            0.788,
            0.815,
            0.85,
            0.892 75.2%,
            1 80.2%,
            0.973,
            0.954,
            0.943,
            0.939,
            0.943,
            0.954,
            0.973,
            1
        );
        --ease-bounce-3: linear(
            0,
            0.004,
            0.016,
            0.035,
            0.062,
            0.098,
            0.141 11.4%,
            0.25,
            0.39,
            0.562,
            0.764,
            1 30.3%,
            0.847 34.8%,
            0.787,
            0.737,
            0.699,
            0.672,
            0.655,
            0.65,
            0.656,
            0.672,
            0.699,
            0.738,
            0.787,
            0.847 61.7%,
            1 66.2%,
            0.946,
            0.908,
            0.885 74.2%,
            0.879,
            0.878,
            0.879,
            0.885 79.5%,
            0.908,
            0.946,
            1 87.4%,
            0.981,
            0.968,
            0.96,
            0.957,
            0.96,
            0.968,
            0.981,
            1
        );
        --ease-bounce-4: linear(
            0,
            0.004,
            0.016 3%,
            0.062,
            0.141,
            0.25,
            0.391,
            0.562 18.2%,
            1 24.3%,
            0.81,
            0.676 32.3%,
            0.629,
            0.595,
            0.575,
            0.568,
            0.575,
            0.595,
            0.629,
            0.676 48.2%,
            0.811,
            1 56.2%,
            0.918,
            0.86,
            0.825,
            0.814,
            0.825,
            0.86,
            0.918,
            1 77.2%,
            0.94 80.6%,
            0.925,
            0.92,
            0.925,
            0.94 87.5%,
            1 90.9%,
            0.974,
            0.965,
            0.974,
            1
        );
        --ease-bounce-5: linear(
            0,
            0.004,
            0.016 2.5%,
            0.063,
            0.141,
            0.25 10.1%,
            0.562,
            1 20.2%,
            0.783,
            0.627,
            0.534 30.9%,
            0.511,
            0.503,
            0.511,
            0.534 38%,
            0.627,
            0.782,
            1 48.7%,
            0.892,
            0.815,
            0.769 56.3%,
            0.757,
            0.753,
            0.757,
            0.769 61.3%,
            0.815,
            0.892,
            1 68.8%,
            0.908 72.4%,
            0.885,
            0.878,
            0.885,
            0.908 79.4%,
            1 83%,
            0.954 85.5%,
            0.943,
            0.939,
            0.943,
            0.954 90.5%,
            1 93%,
            0.977,
            0.97,
            0.977,
            1
        );
    }
    :where(:root) {
        --palette-hue: 250;
        --palette-hue-rotate-by: 0;
        --palette-chroma: 0.15;
    }
    * {
        --color-1: oklch(
            98% calc(0.03 * var(--palette-chroma, 1))
                calc(var(--palette-hue) + (0 * var(--palette-hue-rotate-by)))
        );
        --color-2: oklch(
            97% calc(0.06 * var(--palette-chroma, 1))
                calc(var(--palette-hue) + (1 * var(--palette-hue-rotate-by)))
        );
        --color-3: oklch(
            93% calc(0.1 * var(--palette-chroma, 1))
                calc(var(--palette-hue) + (2 * var(--palette-hue-rotate-by)))
        );
        --color-4: oklch(
            84% calc(0.12 * var(--palette-chroma, 1))
                calc(var(--palette-hue) + (3 * var(--palette-hue-rotate-by)))
        );
        --color-5: oklch(
            80% calc(0.16 * var(--palette-chroma, 1))
                calc(var(--palette-hue) + (4 * var(--palette-hue-rotate-by)))
        );
        --color-6: oklch(
            71% calc(0.19 * var(--palette-chroma, 1))
                calc(var(--palette-hue) + (5 * var(--palette-hue-rotate-by)))
        );
        --color-7: oklch(
            66% calc(0.2 * var(--palette-chroma, 1))
                calc(var(--palette-hue) + (6 * var(--palette-hue-rotate-by)))
        );
        --color-8: oklch(
            58% calc(0.21 * var(--palette-chroma, 1))
                calc(var(--palette-hue) + (7 * var(--palette-hue-rotate-by)))
        );
        --color-9: oklch(
            53% calc(0.2 * var(--palette-chroma, 1))
                calc(var(--palette-hue) + (8 * var(--palette-hue-rotate-by)))
        );
        --color-10: oklch(
            49% calc(0.19 * var(--palette-chroma, 1))
                calc(var(--palette-hue) + (9 * var(--palette-hue-rotate-by)))
        );
        --color-11: oklch(
            42% calc(0.17 * var(--palette-chroma, 1))
                calc(var(--palette-hue) + (10 * var(--palette-hue-rotate-by)))
        );
        --color-12: oklch(
            35% calc(0.15 * var(--palette-chroma, 1))
                calc(var(--palette-hue) + (11 * var(--palette-hue-rotate-by)))
        );
        --color-13: oklch(
            27% calc(0.12 * var(--palette-chroma, 1))
                calc(var(--palette-hue) + (12 * var(--palette-hue-rotate-by)))
        );
        --color-14: oklch(
            20% calc(0.09 * var(--palette-chroma, 1))
                calc(var(--palette-hue) + (13 * var(--palette-hue-rotate-by)))
        );
        --color-15: oklch(
            16% calc(0.07 * var(--palette-chroma, 1))
                calc(var(--palette-hue) + (14 * var(--palette-hue-rotate-by)))
        );
        --color-16: oklch(
            10% calc(0.05 * var(--palette-chroma, 1))
                calc(var(--palette-hue) + (15 * var(--palette-hue-rotate-by)))
        );
    }
    :where(:root) {
        --size-000: -0.5rem;
        --size-00: -0.25rem;
        --size-1: 0.25rem;
        --size-2: 0.5rem;
        --size-3: 1rem;
        --size-4: 1.25rem;
        --size-5: 1.5rem;
        --size-6: 1.75rem;
        --size-7: 2rem;
        --size-8: 3rem;
        --size-9: 4rem;
        --size-10: 5rem;
        --size-11: 7.5rem;
        --size-12: 10rem;
        --size-13: 15rem;
        --size-14: 20rem;
        --size-15: 30rem;
    }
    :where(:root) {
        --size-fluid-1: clamp(0.5rem, 1vw, 1rem);
        --size-fluid-2: clamp(1rem, 2vw, 1.5rem);
        --size-fluid-3: clamp(1.5rem, 3vw, 2rem);
        --size-fluid-4: clamp(2rem, 4vw, 3rem);
        --size-fluid-5: clamp(4rem, 5vw, 5rem);
        --size-fluid-6: clamp(5rem, 7vw, 7.5rem);
        --size-fluid-7: clamp(7.5rem, 10vw, 10rem);
        --size-fluid-8: clamp(10rem, 20vw, 15rem);
        --size-fluid-9: clamp(15rem, 30vw, 20rem);
        --size-fluid-10: clamp(20rem, 40vw, 30rem);
    }
    :where(:root) {
        --size-content-1: 20ch;
        --size-content-2: 45ch;
        --size-content-3: 60ch;
        --size-content-4: 75ch;
    }
    :where(:root) {
        --size-header-1: 20ch;
        --size-header-2: 25ch;
        --size-header-3: 35ch;
    }
    :where(:root) {
        --size-xxs: 240px;
        --size-xs: 360px;
        --size-sm: 480px;
        --size-md: 768px;
        --size-lg: 1024px;
        --size-xl: 1440px;
        --size-xxl: 1920px;
    }
    :where(:root) {
        --size-relative-000: -0.5ch;
        --size-relative-00: -0.25ch;
        --size-relative-1: 0.25ch;
        --size-relative-2: 0.5ch;
        --size-relative-3: 1ch;
        --size-relative-4: 1.25ch;
        --size-relative-5: 1.5ch;
        --size-relative-6: 1.75ch;
        --size-relative-7: 2ch;
        --size-relative-8: 3ch;
        --size-relative-9: 4ch;
        --size-relative-10: 5ch;
        --size-relative-11: 7.5ch;
        --size-relative-12: 10ch;
        --size-relative-13: 15ch;
        --size-relative-14: 20ch;
        --size-relative-15: 30ch;
    }
    :where(:root) {
        --font-lineheight-00: 0.95;
        --font-lineheight-0: 1.1;
        --font-lineheight-1: 1.25;
        --font-lineheight-2: 1.375;
        --font-lineheight-3: 1.5;
        --font-lineheight-4: 1.75;
        --font-lineheight-5: 2;
    }
    :where(:root) {
        --oklch-red: 25;
        --oklch-pink: 350;
        --oklch-purple: 310;
        --oklch-violet: 290;
        --oklch-indigo: 270;
        --oklch-blue: 240;
        --oklch-cyan: 210;
        --oklch-teal: 185;
        --oklch-green: 145;
        --oklch-lime: 125;
        --oklch-yellow: 100;
        --oklch-orange: 75;
    }
}

@layer openprops.color {
    :where(html) {
        --gray-0: #f8f9fa;
        --gray-1: #f1f3f5;
        --gray-2: #e9ecef;
        --gray-3: #dee2e6;
        --gray-4: #ced4da;
        --gray-5: #adb5bd;
        --gray-6: #868e96;
        --gray-7: #495057;
        --gray-8: #343a40;
        --gray-9: #212529;
        --gray-10: #16191d;
        --gray-11: #0d0f12;
        --gray-12: #030507;
        --stone-0: #f8fafb;
        --stone-1: #f2f4f6;
        --stone-2: #ebedef;
        --stone-3: #e0e4e5;
        --stone-4: #d1d6d8;
        --stone-5: #b1b6b9;
        --stone-6: #979b9d;
        --stone-7: #7e8282;
        --stone-8: #666968;
        --stone-9: #50514f;
        --stone-10: #3a3a37;
        --stone-11: #252521;
        --stone-12: #121210;
        --red-0: #fff5f5;
        --red-1: #ffe3e3;
        --red-2: #ffc9c9;
        --red-3: #ffa8a8;
        --red-4: #ff8787;
        --red-5: #ff6b6b;
        --red-6: #fa5252;
        --red-7: #f03e3e;
        --red-8: #e03131;
        --red-9: #c92a2a;
        --red-10: #b02525;
        --red-11: #962020;
        --red-12: #7d1a1a;
        --pink-0: #fff0f6;
        --pink-1: #ffdeeb;
        --pink-2: #fcc2d7;
        --pink-3: #faa2c1;
        --pink-4: #f783ac;
        --pink-5: #f06595;
        --pink-6: #e64980;
        --pink-7: #d6336c;
        --pink-8: #c2255c;
        --pink-9: #a61e4d;
        --pink-10: #8c1941;
        --pink-11: #731536;
        --pink-12: #59102a;
        --purple-0: #f8f0fc;
        --purple-1: #f3d9fa;
        --purple-2: #eebefa;
        --purple-3: #e599f7;
        --purple-4: #da77f2;
        --purple-5: #cc5de8;
        --purple-6: #be4bdb;
        --purple-7: #ae3ec9;
        --purple-8: #9c36b5;
        --purple-9: #862e9c;
        --purple-10: #702682;
        --purple-11: #5a1e69;
        --purple-12: #44174f;
        --violet-0: #f3f0ff;
        --violet-1: #e5dbff;
        --violet-2: #d0bfff;
        --violet-3: #b197fc;
        --violet-4: #9775fa;
        --violet-5: #845ef7;
        --violet-6: #7950f2;
        --violet-7: #7048e8;
        --violet-8: #6741d9;
        --violet-9: #5f3dc4;
        --violet-10: #5235ab;
        --violet-11: #462d91;
        --violet-12: #3a2578;
        --indigo-0: #edf2ff;
        --indigo-1: #dbe4ff;
        --indigo-2: #bac8ff;
        --indigo-3: #91a7ff;
        --indigo-4: #748ffc;
        --indigo-5: #5c7cfa;
        --indigo-6: #4c6ef5;
        --indigo-7: #4263eb;
        --indigo-8: #3b5bdb;
        --indigo-9: #364fc7;
        --indigo-10: #2f44ad;
        --indigo-11: #283a94;
        --indigo-12: #21307a;
        --blue-0: #e7f5ff;
        --blue-1: #d0ebff;
        --blue-2: #a5d8ff;
        --blue-3: #74c0fc;
        --blue-4: #4dabf7;
        --blue-5: #339af0;
        --blue-6: #228be6;
        --blue-7: #1c7ed6;
        --blue-8: #1971c2;
        --blue-9: #1864ab;
        --blue-10: #145591;
        --blue-11: #114678;
        --blue-12: #0d375e;
        --cyan-0: #e3fafc;
        --cyan-1: #c5f6fa;
        --cyan-2: #99e9f2;
        --cyan-3: #66d9e8;
        --cyan-4: #3bc9db;
        --cyan-5: #22b8cf;
        --cyan-6: #15aabf;
        --cyan-7: #1098ad;
        --cyan-8: #0c8599;
        --cyan-9: #0b7285;
        --cyan-10: #095c6b;
        --cyan-11: #074652;
        --cyan-12: #053038;
        --teal-0: #e6fcf5;
        --teal-1: #c3fae8;
        --teal-2: #96f2d7;
        --teal-3: #63e6be;
        --teal-4: #38d9a9;
        --teal-5: #20c997;
        --teal-6: #12b886;
        --teal-7: #0ca678;
        --teal-8: #099268;
        --teal-9: #087f5b;
        --teal-10: #066649;
        --teal-11: #054d37;
        --teal-12: #033325;
        --green-0: #ebfbee;
        --green-1: #d3f9d8;
        --green-2: #b2f2bb;
        --green-3: #8ce99a;
        --green-4: #69db7c;
        --green-5: #51cf66;
        --green-6: #40c057;
        --green-7: #37b24d;
        --green-8: #2f9e44;
        --green-9: #2b8a3e;
        --green-10: #237032;
        --green-11: #1b5727;
        --green-12: #133d1b;
        --lime-0: #f4fce3;
        --lime-1: #e9fac8;
        --lime-2: #d8f5a2;
        --lime-3: #c0eb75;
        --lime-4: #a9e34b;
        --lime-5: #94d82d;
        --lime-6: #82c91e;
        --lime-7: #74b816;
        --lime-8: #66a80f;
        --lime-9: #5c940d;
        --lime-10: #4c7a0b;
        --lime-11: #3c6109;
        --lime-12: #2c4706;
        --yellow-0: #fff9db;
        --yellow-1: #fff3bf;
        --yellow-2: #ffec99;
        --yellow-3: #ffe066;
        --yellow-4: #ffd43b;
        --yellow-5: #fcc419;
        --yellow-6: #fab005;
        --yellow-7: #f59f00;
        --yellow-8: #f08c00;
        --yellow-9: #e67700;
        --yellow-10: #b35c00;
        --yellow-11: #804200;
        --yellow-12: #663500;
        --orange-0: #fff4e6;
        --orange-1: #ffe8cc;
        --orange-2: #ffd8a8;
        --orange-3: #ffc078;
        --orange-4: #ffa94d;
        --orange-5: #ff922b;
        --orange-6: #fd7e14;
        --orange-7: #f76707;
        --orange-8: #e8590c;
        --orange-9: #d9480f;
        --orange-10: #bf400d;
        --orange-11: #99330b;
        --orange-12: #802b09;
        --choco-0: #fff8dc;
        --choco-1: #fce1bc;
        --choco-2: #f7ca9e;
        --choco-3: #f1b280;
        --choco-4: #e99b62;
        --choco-5: #df8545;
        --choco-6: #d46e25;
        --choco-7: #bd5f1b;
        --choco-8: #a45117;
        --choco-9: #8a4513;
        --choco-10: #703a13;
        --choco-11: #572f12;
        --choco-12: #3d210d;
        --brown-0: #faf4eb;
        --brown-1: #ede0d1;
        --brown-2: #e0cab7;
        --brown-3: #d3b79e;
        --brown-4: #c5a285;
        --brown-5: #b78f6d;
        --brown-6: #a87c56;
        --brown-7: #956b47;
        --brown-8: #825b3a;
        --brown-9: #6f4b2d;
        --brown-10: #5e3a21;
        --brown-11: #4e2b15;
        --brown-12: #422412;
        --sand-0: #f8fafb;
        --sand-1: #e6e4dc;
        --sand-2: #d5cfbd;
        --sand-3: #c2b9a0;
        --sand-4: #aea58c;
        --sand-5: #9a9178;
        --sand-6: #867c65;
        --sand-7: #736a53;
        --sand-8: #5f5746;
        --sand-9: #4b4639;
        --sand-10: #38352d;
        --sand-11: #252521;
        --sand-12: #121210;
        --camo-0: #f9fbe7;
        --camo-1: #e8ed9c;
        --camo-2: #d2df4e;
        --camo-3: #c2ce34;
        --camo-4: #b5bb2e;
        --camo-5: #a7a827;
        --camo-6: #999621;
        --camo-7: #8c851c;
        --camo-8: #7e7416;
        --camo-9: #6d6414;
        --camo-10: #5d5411;
        --camo-11: #4d460e;
        --camo-12: #36300a;
        --jungle-0: #ecfeb0;
        --jungle-1: #def39a;
        --jungle-2: #d0e884;
        --jungle-3: #c2dd6e;
        --jungle-4: #b5d15b;
        --jungle-5: #a8c648;
        --jungle-6: #9bbb36;
        --jungle-7: #8fb024;
        --jungle-8: #84a513;
        --jungle-9: #7a9908;
        --jungle-10: #658006;
        --jungle-11: #516605;
        --jungle-12: #3d4d04;
    }
}
/* OP NORMZLIZE */
@layer normalize {
    :where(html) {
        --csstools-color-scheme--light: initial;
        --link: var(--indigo-7);
        --link-visited: var(--purple-7);
        --text-1: var(--gray-12);
        --text-2: var(--gray-7);
        --surface-1: var(--gray-0);
        --surface-2: var(--gray-2);
        --surface-3: var(--gray-3);
        --surface-4: var(--gray-4);
        --scrollthumb-color: var(--gray-7);
        -webkit-text-size-adjust: none;
        accent-color: var(--brand, var(--link));
        background-color: var(--surface-1);
        block-size: 100%;
        caret-color: var(--brand, var(--link));
        color: var(--text-1);
        color-scheme: light;
        font-family: var(--font-system-ui);
        line-height: var(--font-lineheight-3);
        scrollbar-color: var(--scrollthumb-color) transparent;
    }
    @media (dynamic-range: high) or (color-gamut: p3) {
        @supports (color: color(display-p3 0 0 0)) {
            :where(html) {
                --link: color(display-p3 0.1 0.39 1);
                --link-visited: color(display-p3 0.6 0.2 1);
            }
        }
    }
    :where(html) :where(dialog) {
        background-color: var(--surface-1);
    }
    :where(html) :where(button, .btn) {
        --_highlight: var(--_highlight-light);
        --_bg: var(--_bg-light);
        --_ink-shadow: var(--_ink-shadow-light);
    }
    :where(html) :where(button, .btn) :where([type="reset"]) {
        --_text: var(--red-6);
        --_border: var(--red-3);
    }
    :where(html) [disabled]:where(button, input[type="button"], .btn) {
        --_text: var(--gray-6);
    }
    :where(html) [disabled]:where(button, input[type="submit"], .btn) {
        --_text: var(--gray-6);
    }
    :where(html) [disabled]:where(button, input[type="reset"], .btn) {
        --_text: var(--gray-6);
    }
    :where(html)
        :where(
            textarea,
            select,
            input:not([type="button"], [type="submit"], [type="reset"])
        ) {
        background-color: var(--surface-2);
    }
    @media (prefers-color-scheme: dark) {
        :where(html) {
            --csstools-color-scheme--light: ;
            --link: var(--indigo-3);
            --link-visited: var(--purple-3);
            --text-1: var(--gray-1);
            --text-2: var(--gray-4);
            --surface-1: var(--gray-9);
            --surface-2: var(--gray-8);
            --surface-3: var(--gray-7);
            --surface-4: var(--gray-6);
            --scrollthumb-color: var(--gray-6);
            --shadow-strength: 10%;
            --shadow-color: 220 40% 2%;
            color-scheme: dark;
        }
    }
    :where(a[href]) {
        color: var(--brand, var(--link));
    }
    :where(a[href]):where(:visited) {
        color: var(--link-visited);
    }
    :focus-visible {
        outline-color: var(--brand, var(--link));
    }
    *,
    :after,
    :before {
        box-sizing: border-box;
    }
    :where(:not(dialog)) {
        margin: 0;
    }
    :where(:not(fieldset, progress, meter)) {
        background-origin: border-box;
        background-repeat: no-repeat;
        border-style: solid;
        border-width: 0;
    }
    @media (prefers-reduced-motion: no-preference) {
        :where(html) {
            scroll-behavior: smooth;
        }
    }
    @media (prefers-reduced-motion: no-preference) {
        :where(:focus-visible) {
            transition: outline-offset 145ms var(--ease-2);
        }
        :where(:not(:active):focus-visible) {
            transition-duration: 0.25s;
        }
    }
    :where(:not(:active):focus-visible) {
        outline-offset: 5px;
    }
    :where(body) {
        min-block-size: 100%;
    }
    :where(h1, h2, h3, h4, h5, h6) {
        text-wrap: balance;
        font-weight: var(--font-weight-9);
        line-height: var(--font-lineheight-1);
    }
    :where(h1) {
        font-size: var(--font-size-8);
        max-inline-size: var(--size-header-1);
    }
    :where(h2) {
        font-size: var(--font-size-6);
        max-inline-size: var(--size-header-2);
    }
    :where(h3) {
        font-size: var(--font-size-5);
    }
    :where(h4) {
        font-size: var(--font-size-4);
    }
    :where(h5) {
        font-size: var(--font-size-3);
    }
    :where(h3, h4, h5, h6, dt) {
        max-inline-size: var(--size-header-3);
    }
    :where(p, ul, ol, dl, h6) {
        font-size: var(--font-size-2);
    }
    :where(a, u, ins, abbr) {
        text-underline-offset: 1px;
    }
    @supports (-moz-appearance: none) {
        :where(a, u, ins, abbr) {
            text-underline-offset: 2px;
        }
    }
    :where(
        a[href],
        area,
        button,
        input:not(
            [type="text"],
            [type="email"],
            [type="number"],
            [type="password"],
            [type=""],
            [type="tel"],
            [type="url"]
        ),
        label[for],
        select,
        summary,
        [tabindex]:not([tabindex*="-"], pre)
    ) {
        cursor: pointer;
    }
    :where(
        a[href],
        area,
        button,
        input,
        label[for],
        select,
        summary,
        textarea,
        [tabindex]:not([tabindex*="-"])
    ) {
        -webkit-tap-highlight-color: transparent;
        touch-action: manipulation;
    }
    :where(a):where([href]) {
        text-decoration-color: var(--indigo-2);
    }
    :where(a):where([href]):where(:visited) {
        text-decoration-color: var(--purple-2);
    }
    :where(a):where(:not(:hover)) {
        text-decoration: inherit;
    }
    :where(img, svg, video, canvas, audio, iframe, embed, object) {
        display: block;
    }
    :where(img, svg, video) {
        block-size: auto;
        max-inline-size: 100%;
    }
    :where(input, button, textarea, select),
    :where(input[type="file"])::-webkit-file-upload-button {
        color: inherit;
        font: inherit;
        font-size: inherit;
        letter-spacing: inherit;
    }
    ::placeholder {
        color: var(--gray-7);
        opacity: 0.75;
    }
    :where(input:not([type="range"]), textarea) {
        padding-block: var(--size-1);
        padding-inline: var(--size-2);
    }
    :where(select) {
        field-sizing: content;
        padding-block: 0.75ch;
        padding-inline: var(--size-relative-4) 0;
    }
    :where(
        textarea,
        select,
        input:not([type="button"], [type="submit"], [type="reset"])
    ) {
        background-color: var(--surface-2);
        border-radius: var(--radius-2);
    }
    :where(textarea) {
        field-sizing: content;
        min-block-size: 2lh;
        min-inline-size: var(--size-content-1);
        resize: vertical;
    }
    :where(input[type="checkbox"], input[type="radio"]) {
        block-size: var(--size-3);
        inline-size: var(--size-3);
    }
    :where(svg:not([width])) {
        inline-size: var(--size-10);
    }
    :where(code, kbd, samp, pre) {
        font-family: var(--font-monospace-code), monospace;
    }
    :where(:not(pre) > code, kbd) {
        white-space: nowrap;
    }
    :where(pre) {
        direction: ltr;
        max-inline-size: max-content;
        min-inline-size: 0;
        white-space: pre;
        writing-mode: lr;
    }
    :where(:not(pre) > code) {
        background: var(--surface-2);
        border-radius: var(--radius-2);
        padding: var(--size-1) var(--size-2);
        writing-mode: lr;
    }
    :where(kbd, var) {
        border-color: var(--surface-4);
        border-radius: var(--radius-2);
        border-width: var(--border-size-1);
        padding: var(--size-1) var(--size-2);
    }
    :where(mark) {
        border-radius: var(--radius-2);
        padding-inline: var(--size-1);
    }
    :where(ol, ul) {
        padding-inline-start: var(--size-8);
    }
    :where(li) {
        padding-inline-start: var(--size-2);
    }
    :where(li, dd, figcaption) {
        max-inline-size: var(--size-content-2);
    }
    :where(p) {
        text-wrap: pretty;
        max-inline-size: var(--size-content-3);
    }
    :where(dt, summary) {
        font-weight: var(--font-weight-7);
    }
    :where(dt:not(:first-of-type)) {
        margin-block-start: var(--size-5);
    }
    :where(small) {
        font-size: max(0.5em, var(--font-size-0));
        max-inline-size: var(--size-content-1);
    }
    :where(hr) {
        background-color: var(--surface-3);
        height: var(--border-size-2);
        margin-block: var(--size-fluid-5);
    }
    :where(figure) {
        display: grid;
        gap: var(--size-2);
        place-items: center;
    }
    :where(figure) > :where(figcaption) {
        text-wrap: balance;
        font-size: var(--font-size-1);
    }
    :where(blockquote, :not(blockquote) > cite) {
        border-inline-start-width: var(--border-size-3);
    }
    :where(blockquote) {
        display: grid;
        gap: var(--size-3);
        max-inline-size: var(--size-content-2);
        padding-block: var(--size-3);
        padding-inline: var(--size-4);
    }
    :where(:not(blockquote) > cite) {
        padding-inline-start: var(--size-2);
    }
    :where(summary) {
        background: var(--surface-3);
        border-radius: var(--radius-2);
        margin: calc(var(--size-2) * -1) calc(var(--size-3) * -1);
        padding: var(--size-2) var(--size-3);
    }
    :where(details) {
        background: var(--surface-2);
        border-radius: var(--radius-2);
        padding-block: var(--size-2);
        padding-inline: var(--size-3);
    }
    :where(details[open] > summary) {
        border-end-end-radius: 0;
        border-end-start-radius: 0;
        margin-bottom: var(--size-2);
    }
    :where(fieldset) {
        border: var(--border-size-1) solid var(--surface-4);
        border-radius: var(--radius-2);
    }
    :where(del) {
        background: var(--red-9);
        color: var(--red-2);
    }
    :where(ins) {
        background: var(--green-9);
        color: var(--green-1);
    }
    :where(abbr) {
        text-decoration-color: var(--blue-5);
    }
    :where(dialog) {
        background-color: var(--surface-1);
        border-radius: var(--radius-3);
        box-shadow: var(--shadow-6);
        color: inherit;
    }
    :where(menu) {
        display: flex;
        gap: var(--size-3);
        padding-inline-start: 0;
    }
    :where(sup) {
        font-size: 0.5em;
    }
    :where(table) {
        --nice-inner-radius: calc(var(--radius-3) - 2px);
        background: var(--surface-2);
        border: 1px solid var(--surface-2);
        border-radius: var(--radius-3);
        width: fit-content;
    }
    :where(table:not(:has(tfoot)) tr:last-child td:first-child) {
        border-end-start-radius: var(--nice-inner-radius);
    }
    :where(table:not(:has(tfoot)) tr:last-child td:last-child) {
        border-end-end-radius: var(--nice-inner-radius);
    }
    :where(table thead tr:first-child th:first-child) {
        border-start-start-radius: var(--nice-inner-radius);
    }
    :where(table thead tr:first-child th:last-child) {
        border-start-end-radius: var(--nice-inner-radius);
    }
    :where(tfoot tr:last-child th:first-of-type) {
        border-end-start-radius: var(--nice-inner-radius);
    }
    :where(tfoot tr:last-child td:first-of-type) {
        border-end-start-radius: var(--nice-inner-radius);
    }
    :where(tfoot tr:last-child th:last-of-type) {
        border-end-end-radius: var(--nice-inner-radius);
    }
    :where(tfoot tr:last-child td:last-of-type) {
        border-end-end-radius: var(--nice-inner-radius);
    }
    :where(th) {
        background-color: var(--surface-2);
        color: var(--text-1);
    }
    :where(table a:not(.does-not-exist):focus-visible) {
        outline-offset: -2px;
    }
    :where(table button:not(.does-not-exist):focus-visible) {
        outline-offset: -2px;
    }
    :where(table [contenteditable]:focus-visible) {
        outline-offset: -2px;
    }
    :where(td) {
        text-wrap: pretty;
        background: var(--surface-1);
        max-inline-size: var(--size-content-2);
    }
    :where(td, th) {
        padding: var(--size-2);
        text-align: left;
    }
    :where(td:not([align])) {
        text-align: center;
    }
    :where(th:not([align])) {
        text-align: center;
    }
    :where(thead) {
        border-collapse: collapse;
    }
    :where(table tr:hover td),
    :where(tbody tr:nth-child(2n):hover td) {
        background-color: var(--surface-3);
    }
    :where(table > caption) {
        margin: var(--size-3);
    }
    :where(tfoot button) {
        padding-block: var(--size-1);
        padding-inline: var(--size-3);
    }
    @media (prefers-color-scheme: dark) {
        :where(
            textarea,
            select,
            input:not([type="button"], [type="submit"], [type="reset"])
        ) {
            background-color: #171a1c;
        }
        :where(dialog) {
            background-color: var(--surface-2);
        }
        ::placeholder {
            color: var(--gray-6);
        }
    }
}

/* THEME */
@layer theme {
    :root[data-theme-mode="system"] {
        color-scheme: light dark;
    }
    :root[data-theme-mode="light"] {
        color-scheme: light;
    }
    :root[data-theme-mode="dark"] {
        color-scheme: dark;
    }

    /* Color theme selectors based on data attribute instead of select */
    :root[data-theme-color="cyan"] {
        --palette-hue: var(--oklch-cyan);
    }
    :root[data-theme-color="red"] {
        --palette-hue: var(--oklch-red);
    }
    :root[data-theme-color="pink"] {
        --palette-hue: var(--oklch-pink);
    }
    :root[data-theme-color="purple"] {
        --palette-hue: var(--oklch-purple);
    }
    :root[data-theme-color="violet"] {
        --palette-hue: var(--oklch-violet);
    }
    :root[data-theme-color="indigo"] {
        --palette-hue: var(--oklch-indigo);
    }
    :root[data-theme-color="blue"] {
        --palette-hue: var(--oklch-blue);
    }
    :root[data-theme-color="teal"] {
        --palette-hue: var(--oklch-teal);
    }
    :root[data-theme-color="green"] {
        --palette-hue: var(--oklch-green);
    }
    :root[data-theme-color="lime"] {
        --palette-hue: var(--oklch-lime);
    }
    :root[data-theme-color="yellow"] {
        --palette-hue: var(--oklch-yellow);
    }
    :root[data-theme-color="orange"] {
        --palette-hue: var(--oklch-orange);
    }

    /* Typography */
    /* Default typography scale (Medium) */
    :root {
        --font-size-h1: var(--font-size-fluid-3);
        --font-size-h2: var(--font-size-fluid-2);
        --font-size-h3: var(--font-size-fluid-1);
        --font-size-h4: var(--font-size-3);
        --font-size-h5: var(--font-size-2);
        --font-size-h6: var(--font-size-fluid-0);
        --font-size-lg: var(--font-size-3);
        --font-size-md: var(--font-size-fluid-0);
        --font-size-sm: var(--font-size-0);
        --font-size-xs: var(--font-size-00);
    }

    /* Small Scale */
    [data-font-scale="sm"] {
        --font-size-h1: var(--font-size-8);
        --font-size-h2: var(--font-size-6);
        --font-size-h3: var(--font-size-5);
        --font-size-h4: var(--font-size-3);
        --font-size-h5: var(--font-size-2);
        --font-size-h6: var(--font-size-1);
        --font-size-lg: var(--font-size-2);
        --font-size-md: var(--font-size-1);
        --font-size-sm: var(--font-size-0);
        --font-size-xs: var(--font-size-00);

        line-height: var(--font-lineheight-3);
    }

    /* Medium Scale (Default) */
    [data-font-scale="md"] {
        --font-size-h1: var(--font-size-fluid-3);
        --font-size-h2: var(--font-size-fluid-2);
        --font-size-h3: var(--font-size-fluid-1);
        --font-size-h4: var(--font-size-3);
        --font-size-h5: var(--font-size-2);
        --font-size-h6: var(--font-size-fluid-0);
        --font-size-lg: var(--font-size-3);
        --font-size-md: var(--font-size-fluid-1);
        --font-size-sm: var(--font-size-1);
        --font-size-xs: var(--font-size-0);

        line-height: var(--font-lineheight-4);
    }

    /* Large Scale */
    [data-font-scale="lg"] {
        --font-size-h1: var(--font-size-fluid-3);
        --font-size-h2: var(--font-size-fluid-2);
        --font-size-h3: var(--font-size-5);
        --font-size-h4: var(--font-size-4);
        --font-size-h5: var(--font-size-3);
        --font-size-h6: var(--font-size-2);
        --font-size-lg: var(--font-size-4);
        --font-size-md: var(--font-size-3);
        --font-size-sm: var(--font-size-2);
        --font-size-xs: var(--font-size-1);

        line-height: var(--font-lineheight-5);
    }

    :root {
        /* form icons */
        --icon-valid: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="%2300aa00" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M20 6 9 17l-5-5"/></svg>');
        --icon-invalid: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="%23ff0000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg>');

        --drawer-backdrop-color: rgba(0, 0, 0, 0.5);
        --drawer-background: var(--surface-hue);
        --drawer-border-color: var(--border-color);
        --drawer-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
        --drawer-border-radius: 12px;
        --drawer-animation-duration: 0.3s;
        --drawer-animation-easing: var(--ease-3, cubic-bezier(0.25, 0, 0.3, 1));
    }

    /* Global scrollbar styles */
    * {
        scrollbar-width: thin;
        scrollbar-color: var(--color-7) transparent;

        /* transition: scrollbar-color 0.3s ease;

        &:not(:hover) {
            scrollbar-color: var(--color-5) transparent;
        } */
    }

    :where(html) {
        color-scheme: light dark;
        --palette-hue: var(--oklch-cyan);
        --palette-hue-rotate-by: 5;
        --palette-chroma: 0.89;

        /* Mike Layout*/
        --min-column-size: 40ch;

        /* Mike Spacing */
        :root {
            --step--2: clamp(0.7813rem, 0.7747rem + 0.0326vw, 0.8rem);
            --step--1: clamp(0.9375rem, 0.9158rem + 0.1087vw, 1rem);
            --step-0: clamp(1.125rem, 1.0815rem + 0.2174vw, 1.25rem);
            --step-1: clamp(1.35rem, 1.2761rem + 0.3696vw, 1.5625rem);
            --step-2: clamp(1.62rem, 1.5041rem + 0.5793vw, 1.9531rem);
            --step-3: clamp(1.944rem, 1.771rem + 0.8651vw, 2.4414rem);
            --step-4: clamp(2.3328rem, 2.0827rem + 1.2504vw, 3.0518rem);
            --step-5: clamp(2.7994rem, 2.4462rem + 1.7658vw, 3.8147rem);

            --ratio: 1.3;
            --s-5: calc(var(--s-4) / var(--ratio));
            --s-4: calc(var(--s-3) / var(--ratio));
            --s-3: calc(var(--s-2) / var(--ratio));
            --s-2: calc(var(--s-1) / var(--ratio));
            --s-1: calc(var(--s0) / var(--ratio));
            --s0: 1rem;
            --s1: calc(var(--s0) * var(--ratio));
            --s2: calc(var(--s1) * var(--ratio));
            --s3: calc(var(--s2) * var(--ratio));
            --s4: calc(var(--s3) * var(--ratio));
            --s5: calc(var(--s4) * var(--ratio));
        }

        /* body {
            background-image: light-dark(var(--gradient-23), var(--gradient-9));
        } */

        /* --_bg-color: light-dark(var(--gray-3), var(--gray-14)); */
        /* --bg-color-nav: light-dark(var(--gray-4), var(--gray-13)); */
        --surface-hue: light-dark(
            color-mix(in srgb, var(--color-4), var(--gray-3) 93%),
            color-mix(in srgb, var(--color-2), var(--gray-13) 93%)
        );
        --surface-hue-alt: light-dark(
            color-mix(in srgb, var(--color-5), var(--gray-4) 90%),
            color-mix(in srgb, var(--color-13), var(--gray-5) 90%)
        );

        /* Primary */
        --primary: var(--color-8);
        --primary-light: oklch(from var(--primary) calc(l * 1.25) c h);
        --primary-dark: oklch(from var(--primary) calc(l * 0.75) c h);
        --primary-contrast: var(--gray-1);

        /* Text */
        --text-color-1: light-dark(var(--gray-15), var(--gray-1));
        --text-color-1-contrast: light-dark(var(--gray-2), var(--gray-15));
        --text-color-2: light-dark(var(--gray-13), var(--gray-4));
        --text-color-2-contrast: light-dark(var(--gray-4), var(--gray-13));

        /* Surface */
        --surface-default: light-dark(var(--gray-1), var(--gray-13));
        --surface-filled: light-dark(var(--gray-3), var(--gray-15));
        --surface-tonal: light-dark(var(--gray-3), var(--gray-12));
        --surface-elevated: light-dark(var(--gray-1), var(--gray-12));

        /* Shadows */
        --shadow-color: light-dark(220 3% 15%, 220 40% 2%);
        --shadow-strength: light-dark(1%, 10%);
        --inner-shadow-highlight: light-dark(
            inset 0 -0.5px 0 0 #fff,
            inset 0 0.5px 0 0 #0001,
            inset 0 -0.5px 0 0 #fff1,
            inset 0 0.5px 0 0 #0007
        );

        /* Borders */
        --border-color: light-dark(
            color-mix(in srgb, var(--color-5), var(--gray-4) 90%),
            color-mix(in srgb, var(--color-7), var(--gray-10) 90%)
        );
        --border-radius: var(--size-1);
        --border-width: 1px;
        --drawer-radius: var(--size-3);

        /* Input Field */
        --field-border-color: var(--border-color);
        --field-border-radius: var(--size-1);
        --field-border-width: 1px;
        --field-size: 2.3lh;
        --field-size-small: 1.9lh;

        /* Button */
        --button-border-radius: var(--radius-round);
        /* Ripple effect */
        @media (prefers-reduced-motion: no-preference) {
            --button-ripple-size: 100%;
            --button-ripple-duration: 0.5s;
        }
    }

    /* Highlight colors */

    :where(.red, .error, del) {
        --palette-hue: var(--oklch-red, 25);
        --palette-chroma: 1;
        --palette-hue-rotate-by: 1;
    }
    :where(.blue, .ok, abbr, dfn) {
        --palette-hue: var(--oklch-blue, 210);
        --palette-chroma: 1;
        --palette-hue-rotate-by: 1;
    }
    :where(.green, .good, ins) {
        --palette-hue: var(--oklch-green, 145);
        --palette-chroma: 1;
        --palette-hue-rotate-by: 1;
    }
    :where(.orange, .warning) {
        --palette-hue: var(--oklch-orange, 75);
        --palette-chroma: 1;
        --palette-hue-rotate-by: 1;
    }

    :where(html) {
        --red: oklch(from var(--color-9) l 0.2 25);
        --blue: oklch(from var(--color-9) l 0.2 210);
        --green: oklch(from var(--color-9) l 0.2 145);
        --orange: oklch(from var(--color-7) l 0.2 75);
    }

    /* Gray palette */
    :where(html) {
        --gray-chroma: 0.01;
        --gray-lightness: 255;

        --gray-1: oklch(
            from var(--color-1) l var(--gray-chroma) var(--gray-lightness)
        );
        --gray-2: oklch(
            from var(--color-2) l var(--gray-chroma) var(--gray-lightness)
        );
        --gray-3: oklch(
            from var(--color-3) l var(--gray-chroma) var(--gray-lightness)
        );
        --gray-4: oklch(
            from var(--color-4) l var(--gray-chroma) var(--gray-lightness)
        );
        --gray-5: oklch(
            from var(--color-5) l var(--gray-chroma) var(--gray-lightness)
        );
        --gray-6: oklch(
            from var(--color-6) l var(--gray-chroma) var(--gray-lightness)
        );
        --gray-7: oklch(
            from var(--color-7) l var(--gray-chroma) var(--gray-lightness)
        );
        --gray-8: oklch(
            from var(--color-8) l var(--gray-chroma) var(--gray-lightness)
        );
        --gray-9: oklch(
            from var(--color-9) l var(--gray-chroma) var(--gray-lightness)
        );
        --gray-10: oklch(
            from var(--color-10) l var(--gray-chroma) var(--gray-lightness)
        );
        --gray-11: oklch(
            from var(--color-11) l var(--gray-chroma) var(--gray-lightness)
        );
        --gray-12: oklch(
            from var(--color-12) l var(--gray-chroma) var(--gray-lightness)
        );
        --gray-13: oklch(
            from var(--color-13) l var(--gray-chroma) var(--gray-lightness)
        );
        --gray-14: oklch(
            from var(--color-14) l var(--gray-chroma) var(--gray-lightness)
        );
        --gray-15: oklch(
            from var(--color-15) l var(--gray-chroma) var(--gray-lightness)
        );
        --gray-16: oklch(
            from var(--color-16) l var(--gray-chroma) var(--gray-lightness)
        );
    }
}

/* BUTTON */
@layer components.base {
    :where(.button) {
        --_bg-color: transparent;
        --_border-color: transparent;
        --_border-radius: var(--button-border-radius);
        --_font-size: initial;
        --_min-height: 2.375rem;
        --_text-color: var(--primary);

        -webkit-tap-highlight-color: transparent;
        -webkit-touch-callout: none;
        align-items: center;
        background: var(--_bg-color);
        border-radius: var(--_border-radius);
        border: var(--border-size-1) solid var(--_border-color);
        color: var(--_text-color);
        display: inline-flex;
        font-size: var(--_font-size);
        font-weight: 700;
        gap: var(--size-2);
        justify-content: center;
        min-block-size: var(--_min-height);
        padding-block: 0.5ex;
        padding-inline: 1.5ex;
        text-align: center;
        text-decoration: none;
        user-select: none;

        &:where([disabled]) {
            cursor: not-allowed;
            opacity: 0.64;
        }

        @media (prefers-reduced-motion: no-preference) {
            transition:
                background-color 0.2s var(--ease-out-3),
                box-shadow 0.2s var(--ease-out-3),
                border-color 0.2s var(--ease-out-3),
                color 0.2s var(--ease-out-3),
                outline-offset 0.05s var(--ease-1);
        }

        /* Element states */
        &:where(:not([disabled])) {
            &:where(:not(:active):hover) {
                --_bg-color: light-dark(
                    oklch(from var(--primary) l 0.01 h / 20%),
                    oklch(from var(--primary) l 0.01 h / 40%)
                );
            }

            &:where(:active) {
                box-shadow: var(--inner-shadow-3);

                & > *,
                &::before,
                &::after {
                    transform: translateY(1px);
                }
            }
        }

        /* Disabled */
        &:where([disabled]) {
            --_text-color: color-mix(
                in oklch,
                var(--text-color-2) 50%,
                var(--surface-default)
            );
        }

        /* Icon */
        &:where(:has(svg), &.icon-only) {
            gap: 1ex;

            & svg:not([fill="none"]) {
                fill: currentColor;
            }

            & svg[stroke] {
                stroke: currentColor;
            }
        }

        /* Sizes */
        &.small {
            --_min-height: 1.875rem;
            padding-block: 0;
            padding-inline: 1ex;
        }

        &.large {
            --_min-height: 2.875rem;
            padding-inline: 4ex;
        }

        /* Variants */
        &.outlined {
            --_bg-color: var(--surface-default);
            --_border-color: var(--color-8);
            --_text-color: var(--color-8);

            &:where(:not([disabled])) {
                &:where(:not(:active):hover) {
                    --_bg-color: var(--color-10);
                    --_border-color: var(--color-10);
                    --_text-color: var(--color-1);
                }

                &:where(:active) {
                    --_bg-color: var(--color-9);
                    --_border-color: var(--color-9);
                    --_text-color: var(--color-1);
                    box-shadow: var(--inner-shadow-3);

                    & > * {
                        transform: translateY(1px);
                    }
                }
            }

            &:where([disabled]) {
                --_bg-color: var(--surface-default);
                --_border-color: color-mix(
                    in oklch,
                    var(--text-color-2) 20%,
                    var(--surface-default)
                );
                --_text-color: color-mix(
                    in oklch,
                    var(--text-color-2) 40%,
                    var(--surface-default)
                );
            }
        }

        &.tonal {
            --_bg-color: var(--color-6);
            --_text-color: var(--color-16);

            &:where(:not([disabled])) {
                &:where(:not(:active):hover) {
                    --_bg-color: var(--color-9);
                    --_border-color: var(--color-9);
                }

                &:where(:active) {
                    --_bg-color: var(--color-7);
                    --_border-color: var(--color-7);
                    box-shadow: var(--inner-shadow-3);

                    & > * {
                        transform: translateY(1px);
                    }
                }
            }

            &:where([disabled]) {
                --_bg-color: color-mix(
                    in oklch,
                    var(--text-color-2) 8%,
                    var(--surface-default)
                );
                --_text-color: color-mix(
                    in oklch,
                    var(--text-color-2) 70%,
                    var(--surface-default)
                );
            }
        }

        &.filled {
            --_bg-color: var(--color-8);
            --_text-color: var(--color-1);

            &:where(:not([disabled])) {
                &:where(:not(:active):hover) {
                    --_bg-color: var(--color-10);
                    --_border-color: var(--color-10);
                }

                &:where(:active) {
                    --_bg-color: var(--color-9);
                    --_border-color: var(--color-9);
                    box-shadow: var(--inner-shadow-3);

                    & > * {
                        transform: translateY(1px);
                    }
                }
            }

            &:where([disabled]) {
                --_bg-color: color-mix(
                    in oklch,
                    var(--text-color-2) 20%,
                    var(--surface-default)
                );
                --_text-color: color-mix(
                    in oklch,
                    var(--text-color-2) 70%,
                    var(--surface-default)
                );
            }
        }

        &.elevated {
            --_bg-color: light-dark(
                color-mix(in oklch, var(--gray-2) 97%, var(--color-16)),
                color-mix(in oklch, var(--gray-13) 97%, var(--color-1))
            );
            --_text-color: var(--color-8);

            box-shadow:
                0px 3px 1px -2px oklch(0 0 0 / 20%),
                0px 2px 2px 0px oklch(0 0 0 / 14%),
                0px 1px 5px 0px oklch(0 0 0 / 12%);

            &:where(:not([disabled])) {
                &:where(:not(:active):hover) {
                    --_bg-color: light-dark(
                        color-mix(in oklch, var(--gray-2) 93%, var(--color-8)),
                        color-mix(in oklch, var(--gray-13) 93%, var(--color-8))
                    );
                }

                &:where(:active) {
                    --_bg-color: light-dark(
                        color-mix(in oklch, var(--gray-2) 91%, var(--color-8)),
                        color-mix(in oklch, var(--gray-13) 91%, var(--color-8))
                    );
                    box-shadow: var(--inner-shadow-3);

                    & > * {
                        transform: translateY(1px);
                    }
                }
            }

            &:where([disabled]) {
                --_bg-color: color-mix(
                    in oklch,
                    var(--text-color-2) 8%,
                    var(--surface-elevated)
                );
                --_text-color: color-mix(
                    in oklch,
                    var(--text-color-2) 70%,
                    var(--surface-elevated)
                );
            }
        }
    }

    /* file input */
    :where(input[type="file"]) {
        align-self: flex-start;
        border-radius: var(--radius-2);
        border: var(--border-size-1) solid var(--surface-filled);
        box-shadow: var(--inner-shadow-4);
        color: var(--text-color-2-contrast);
        cursor: initial;
        max-inline-size: 100%;
        padding: 0;
    }

    :where(input[type="file"])::-webkit-file-upload-button,
    :where(input[type="file"])::file-selector-button {
        cursor: pointer;
        margin-inline-end: var(--size-relative-6);
    }
}

/* CHIP */
@layer components.base {
    :where(.chip) {
        --_bg-color: var(--surface-tonal);
        --_border-color: var(--border-color);
        --_color: var(--text-color-1);

        align-items: center;
        background: var(--_bg-color) var(--ripple, none);
        border: 1px solid var(--_border-color);
        border-radius: var(--radius-2, 0.5rem);
        color: var(--_color);
        display: inline-flex;
        font-size: var(--font-size-0, 0.75rem);
        gap: var(--size-1);
        block-size: var(--size-7, 2rem);
        padding-inline: var(--size-2);
        text-decoration: none;

        /* Variants */
        &.tonal {
            --_bg-color: var(--surface-tonal);
            --_color: var(--text-color-1);
        }

        &.outlined {
            --_bg-color: var(--surface-default);
            --_color: var(--text-color-1);
        }

        /* Colors */
        &.red,
        &.blue,
        &.green,
        &.orange,
        &.primary {
            --_bg-color: var(--color-5);
            --_border-color: color-mix(in lch, var(--_bg-color), black 20%);
            --_color: color-mix(
                in srgb,
                lch(from var(--_bg-color) calc((50 - l) * infinity) 0 0),
                var(--_bg-color) 10%
            );
        }

        &:where(button, a):where(:not([disabled])) {
            &:where(:not(:active)):hover {
                --_bg-color: light-dark(
                    oklch(from var(--surface-tonal) calc(l * 0.98) c h),
                    oklch(from var(--surface-tonal) calc(l * 1.1) c h)
                );
            }
        }

        /* Icon */
        &:has(svg:first-child) {
            padding-inline: var(--size-1) var(--size-2);
        }
        &:has(svg:last-child) {
            padding-inline: var(--size-2) var(--size-1);
        }

        &:has(svg) {
            svg {
                flex-shrink: 0;
                inline-size: var(--size-3);
            }
        }

        /* Sizes */
        &.small {
            block-size: var(--size-5);
        }
        &.multiline {
            block-size: auto;
        }
    }
}

/* ICON BUTTON */
@layer components.base {
    :where(
        button:has(> svg:only-child),
        button:has(> [tag-name*="icon-"]:only-child > svg:only-child)
    ) {
        --_text-color: inherit;
        align-items: center;
        aspect-ratio: 1;
        background-color: transparent;
        border: 0;
        border-radius: var(--radius-round);
        display: inline-flex;
        inline-size: var(--size-6);
        justify-content: center;
        padding: 0;
        transform-style: preserve-3d;

        &:where([disabled]) {
            color: light-dark(rgb(0, 0, 0/0.3), rgb(255, 255, 255/0.26));
            cursor: not-allowed;
            opacity: 0.64;
        }

        &:where(.selected),
        &.selected {
            color: var(--color-7);
        }

        svg {
            max-inline-size: var(--size-5);
            pointer-events: none;
        }

        &::before {
            --highlight-size: 130%;
        }

        /* Size */
        &.small {
            inline-size: var(--size-4);
            svg {
                max-inline-size: var(--size-4);
            }
        }
    }
}

/* Diviver maybe not the best idea here as someone could want to use hr, span, hr and not expect this probably should add class... */
@layer components.base {
    :where(hr) {
        background-color: var(--border-color);
        block-size: var(--border-size-1);
        margin-block: var(--size-fluid-0);
    }

    /* Target hr followed by span followed by hr */
    :where(hr + span + hr) {
        /* Hide the second hr since we'll style the container */
        display: none;
    }

    /* Style span element when it's between two hrs */
    :where(hr + span:has(+ hr)) {
        display: grid;
        grid-template-columns: 1fr auto 1fr;
        align-items: center;
        gap: 1rem;
        margin: 1rem 0;
    }

    /* Create pseudo-elements for the lines */
    :where(hr + span:has(+ hr))::before,
    :where(hr + span:has(+ hr))::after {
        content: "";
        background-color: var(--border-color);
        block-size: var(--border-size-1);
    }

    /* Hide the first hr when followed by this pattern */
    :where(hr:has(+ span + hr)) {
        display: none;
    }
}

/* TABS modified for slider */
@layer components.base {
    :where(nav.tabs) {
        --_bg-color: transparent;

        & > [role="tablist"] {
            button {
                outline-color: transparent;
                outline-offset: -4px;

                &[aria-selected="true"] {
                    &:focus-visible {
                        outline: 2px solid var(--text-color-1);
                    }
                }
            }
        }

        &.underlined {
            & > [role="tablist"] {
                border-bottom: 1px solid var(--border-color);
                position: relative;
                display: grid;

                /* CSS Counter to count tabs automatically */
                counter-reset: tab-count;

                button {
                    background: transparent;
                    border: none;
                    font-weight: 500;
                    line-height: 1.5;
                    padding: var(--size-fluid-0) var(--size-fluid-1);
                    color: var(--text-color-2);
                    cursor: pointer;
                    transition: color 0.2s ease;

                    /* Increment counter for each button */
                    counter-increment: tab-count;

                    &:hover {
                        color: var(--primary);
                    }

                    &[aria-selected="true"] {
                        color: var(--primary);
                    }
                }

                /* After all buttons, set the grid columns based on count */
                &::before {
                    content: "";
                    grid-column: 1 / -1;
                    display: none;
                    /* This trick uses the counter to set a CSS property */
                }

                /* Dynamic grid columns using counter */
                &:has(button:nth-child(1):nth-last-child(1)) {
                    grid-template-columns: repeat(1, 1fr);
                    --total-tabs: 1;
                }
                &:has(button:nth-child(1):nth-last-child(2)) {
                    grid-template-columns: repeat(2, 1fr);
                    --total-tabs: 2;
                }
                &:has(button:nth-child(1):nth-last-child(3)) {
                    grid-template-columns: repeat(3, 1fr);
                    --total-tabs: 3;
                }
                &:has(button:nth-child(1):nth-last-child(4)) {
                    grid-template-columns: repeat(4, 1fr);
                    --total-tabs: 4;
                }
                &:has(button:nth-child(1):nth-last-child(5)) {
                    grid-template-columns: repeat(5, 1fr);
                    --total-tabs: 5;
                }
                &:has(button:nth-child(1):nth-last-child(6)) {
                    grid-template-columns: repeat(6, 1fr);
                    --total-tabs: 6;
                }

                /* Sliding underline */
                &::after {
                    content: "";
                    position: absolute;
                    bottom: -1px;
                    height: 2px;
                    background: var(--primary);
                    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                    width: calc(100% / var(--total-tabs, 4));
                    left: 0;
                    transform: translateX(
                        calc(var(--selected-index, 0) * 100%)
                    );
                }

                /* Set selected index based on which button has aria-selected="true" */
                &:has(button:nth-child(1)[aria-selected="true"]) {
                    --selected-index: 0;
                }
                &:has(button:nth-child(2)[aria-selected="true"]) {
                    --selected-index: 1;
                }
                &:has(button:nth-child(3)[aria-selected="true"]) {
                    --selected-index: 2;
                }
                &:has(button:nth-child(4)[aria-selected="true"]) {
                    --selected-index: 3;
                }
                &:has(button:nth-child(5)[aria-selected="true"]) {
                    --selected-index: 4;
                }
                &:has(button:nth-child(6)[aria-selected="true"]) {
                    --selected-index: 5;
                }
            }
        }
    }
}

/* Table */
@layer components.base {
    :where(table) {
        border-collapse: collapse;
        width: 100%;
        margin: 0;
        max-inline-size: 100%;
        position: relative;

        /* Rows */
        tr {
            background-color: var(--surface-default);
            border-top: var(--border-width) solid var(--border-color);

            &:first-child {
                border-top: none;
            }

            &:hover {
                background-color: oklch(from var(--surface-filled) l c h / 75%);
            }
        }

        /* Cells */
        th,
        td {
            border-right: var(--border-width) solid var(--border-color);
            border-bottom: var(--border-width) solid var(--border-color);
            padding: var(--size-1) var(--size-2);

            &:first-child {
                border-left: none;
            }

            &:last-child {
                border-right: none;
            }
        }

        /* Last row cells don't need bottom border */
        tr:last-child th,
        tr:last-child td {
            border-bottom: none;
        }

        th {
            background-color: var(--surface-filled);
            color: var(--text-color-1);
            font-size: var(--font-size-sm, 0.75rem);
            font-weight: 600;
            text-align: start;
        }

        td {
            font-size: var(--font-size-sm, 0.75rem);
        }

        /* Truncate - standalone */
        &.truncate-row {
            table-layout: fixed;

            td {
                white-space: nowrap;
                text-overflow: ellipsis;
                overflow: hidden;
            }
        }

        /* Truncate with reveal on hover */
        &.truncate-reveal {
            table-layout: auto;

            td {
                white-space: nowrap;
                text-overflow: ellipsis;
                overflow: hidden;
                max-width: 1px;
                transition: all 0.2s ease;
            }

            td:hover {
                white-space: normal;
                overflow: visible;
                position: relative;
            }
        }

        /* Sortable Icon Padding */
        th:has(svg)::after {
            content: "";
            display: inline-block;
            width: 2rem;
        }
        th:has(svg) {
            overflow: hidden;
            white-space: nowrap;

            button {
                float: inline-end;
            }
        }

        /* Numbers */
        &:has(.numbers) td.numbers {
            text-align: right;
        }

        /* Caption */
        caption {
            caption-side: bottom;
            color: var(--text-color-2);
            font-size: var(--font-size-sm, 0.75rem);
            padding: var(--size-2) 0;
            text-align: start;
        }

        /* Header */
        thead {
            position: sticky;
            top: var(--header-height, 0);
            z-index: 1;
        }

        /* Footer */
        tfoot {
            border-top: 2px solid var(--border-color);

            tr {
                background-color: var(--surface-filled);
            }

            td {
                color: var(--text-color-1);
                font-weight: 600;
            }
        }

        /* Column group */
        colgroup col {
            border: none;
        }

        @container (width < 60ch) {
            th,
            td {
                padding: var(--size-1) 0.875rem;
            }
        }

        /* Row and column highlighting */
        &.highlight-rows {
            tr:hover {
                background-color: var(
                    --highlighted,
                    oklch(from var(--surface-filled) l c h / 50%)
                );
            }
        }

        &.highlight-columns {
            td:hover {
                background-color: var(
                    --highlighted,
                    oklch(from var(--surface-filled) l c h / 50%)
                );
            }

            /* Highlight entire column on cell hover */
            :has(td:hover) td:nth-child(1):hover ~ *,
            :has(td:nth-child(1):hover) td:nth-child(1),
            :has(td:nth-child(2):hover) td:nth-child(2),
            :has(td:nth-child(3):hover) td:nth-child(3),
            :has(td:nth-child(4):hover) td:nth-child(4),
            :has(td:nth-child(5):hover) td:nth-child(5),
            :has(td:nth-child(6):hover) td:nth-child(6),
            :has(td:nth-child(7):hover) td:nth-child(7),
            :has(td:nth-child(8):hover) td:nth-child(8) {
                background-color: var(
                    --highlighted,
                    oklch(from var(--surface-filled) l c h / 30%)
                );
            }
        }

        &.highlight-cross {
            /* Row highlighting */
            tr:hover td {
                background-color: var(
                    --highlighted,
                    oklch(from var(--surface-filled) l c h / 40%)
                );
            }

            /* Column highlighting using :has() */
            :has(td:nth-child(1):hover) td:nth-child(1),
            :has(td:nth-child(2):hover) td:nth-child(2),
            :has(td:nth-child(3):hover) td:nth-child(3),
            :has(td:nth-child(4):hover) td:nth-child(4),
            :has(td:nth-child(5):hover) td:nth-child(5),
            :has(td:nth-child(6):hover) td:nth-child(6),
            :has(td:nth-child(7):hover) td:nth-child(7),
            :has(td:nth-child(8):hover) td:nth-child(8) {
                background-color: var(
                    --highlighted,
                    oklch(from var(--surface-filled) l c h / 40%)
                );
            }

            /* Intersecting cell gets stronger highlight */
            td:hover {
                background-color: var(
                    --highlighted,
                    oklch(from var(--surface-filled) l c h / 70%)
                ) !important;
            }
        }

        /* Dense */
        &.dense {
            th,
            td {
                padding: var(--size-1) var(--size-2);
            }

            caption {
                padding: var(--size-1) 0;
            }

            @container (width < 60ch) {
                th,
                td {
                    padding: var(--size-1) var(--size-2);
                }
            }
        }
    }

    /* Special handling for tables inside cards */
    :where(.card) {
        & > .content:has(> table.truncate-reveal-auto:only-child) {
            padding: 0;
            overflow-x: hidden;
        }
        /* Remove padding from content when it contains only a table */
        & > .content:has(> table:only-child) {
            padding: 0;
        }
        /* Optional: Add some breathing room if table isn't the only content */
        & > .content table:not(:only-child) {
            margin: var(--size-2) 0;
        }
        & > .content:has(> table:only-child) {
            padding: 0;
            overflow-x: auto;
        }
    }
}

/* TOGGLE BUTTON GROUP*/
@layer components.base {
    :where([role="group"].toggle-button-group) {
        --_border-radius: var(--radius-round);
        --_button-padding-inline: clamp(var(--size-2), 3cqi, var(--size-4));
        --_max-width: auto;
        --_icon-size: var(--size-4);

        background-color: var(--surface-default);
        border: 1px solid var(--border-color);
        border-radius: var(--_border-radius);
        display: flex;
        grid-auto-columns: 1fr;
        grid-auto-flow: column;
        max-inline-size: var(--_max-width);
        min-inline-size: max-content;
        overflow: clip;

        /* Size */
        &.small {
            button {
                min-block-size: 2.1875rem; /* 35px */
            }
        }

        &.x-small {
            button {
                min-block-size: var(--size-6); /* 30px */
            }
        }

        &.fullwidth {
            inline-size: 100%;
        }

        /* Button */
        button {
            --_bg-color: transparent;

            align-items: center;
            background: var(--_bg-color) var(--ripple, none);
            border-radius: 0;
            border-inline: 1px solid var(--border-color);
            border-inline-start-width: 0;
            color: var(--text-color-1);
            display: inline-flex;
            flex: auto;
            gap: 1ex;
            justify-content: center;
            min-block-size: 2.5rem; /* 40px */
            min-inline-size: 5ex;
            outline-offset: calc(-1 * var(--size-2));
            padding: 0 var(--_button-padding-inline);
            position: relative;
            user-select: none;

            @media (prefers-reduced-motion: no-preference) {
                transition:
                    background-color 0.2s var(--ease-out-3),
                    box-shadow 0.2s var(--ease-out-3),
                    border-color 0.2s var(--ease-out-3),
                    color 0.2s var(--ease-out-3),
                    outline-offset 0.05s var(--ease-1);
            }

            /* Element states */
            &:hover {
                --_bg-color: light-dark(
                    oklch(0% 0 0 / 0.04),
                    oklch(100% 0 0 / 0.08)
                );
            }

            &:focus-visible {
                outline-offset: -6px;
            }

            /* Disabled */
            &[disabled] {
                border-color: color-mix(
                    in oklch,
                    var(--border-color) 50%,
                    transparent
                );
                cursor: not-allowed;
                color: color-mix(
                    in oklch,
                    var(--text-color-1) 30%,
                    transparent
                );
            }

            &[disabled] + &:not([disabled]):not(:last-of-type) {
                border-inline-end-width: 1px;
            }

            /* Assign border radius for outline */
            &:first-of-type {
                border-bottom-left-radius: var(--_border-radius);
                border-top-left-radius: var(--_border-radius);
            }
            &:last-of-type {
                border-bottom-right-radius: var(--_border-radius);
                border-top-right-radius: var(--_border-radius);
            }

            &:last-of-type {
                border-inline-end-width: 0;
            }

            /* Ripple effect */
            background-position: center;

            &:where(:not([disabled])) {
                &:where(:not(:active):hover) {
                    --ripple: radial-gradient(
                            circle,
                            transparent 1%,
                            var(--_bg-color) 1%
                        )
                        center/15000%;

                    transition: background var(--button-ripple-duration);
                }

                &:where(:hover:active) {
                    background-size: var(--button-ripple-size);
                    transition: background 0s;
                }
            }

            /* Icons */
            svg {
                inline-size: var(--_icon-size);
                inset-inline-start: calc(var(--_button-padding-inline));
                /* Add these for better alignment */
                display: block;
                margin: auto;
                flex-shrink: 0;
            }

            /* Selected */
            &[aria-selected="true"]:not([disabled]) {
                --_bg-color: color-mix(
                    in oklch,
                    var(--primary) 12%,
                    var(--surface-default)
                );
                color: var(--primary);
            }
        }
    }
}

/* Typography */
@layer components.base {
    /* Base typography */
    :where(h1, .h1, h2, .h2, h3, .h3, h4, .h4, h5, .h5, h6, .h6) {
        color: var(--text-color-1);
        font-weight: 700;
        text-wrap: pretty;
    }

    :where(h1, .h1) {
        font-size: var(--font-size-h1, var(--font-size-7));
        letter-spacing: -0.02em;
        line-height: 1.15;
    }

    :where(h2, .h2) {
        font-size: var(--font-size-h2, var(--font-size-5, 2rem));
        letter-spacing: -0.02em;
        line-height: 1.2;
    }

    :where(h3, .h3) {
        font-size: var(--font-size-h3, var(--font-size-4, 1.5rem));
        letter-spacing: -0.01em;
        line-height: 1.167;
    }

    :where(h4, .h4) {
        font-size: var(--font-size-h4, var(--font-size-3, 1.25rem));
        letter-spacing: -0.01em;
        line-height: 1.235;
    }

    :where(h5, .h5) {
        font-size: var(--font-size-h5, var(--font-size-2, 1.1rem));
        line-height: 1.334;
    }

    :where(h6, .h6) {
        font-size: var(--font-size-h6, var(--font-size-1, 1rem));
        line-height: 1;
    }

    :where(hgroup) {
        & > :where(p, .p) {
            margin: 0;
        }

        & > :where(h1, .h1, h2, .h2, h3, .h3, h4, .h4, h5, .h5, h6, .h6) {
            margin-block-end: 0.4em;
        }

        /* The second p element */
        & > :where(p, .p):last-of-type:last-child:not(:first-child) {
            color: oklch(from currentColor l c h / 75%);
            font-size: var(--font-size-lg);
            line-height: 1.6;
        }
    }

    /** Overline */
    :where(.overline, hgroup > :where(p, .p):first-of-type:first-child) {
        color: light-dark(
            oklch(from var(--text-color-2) calc(l * 1.25) c h),
            oklch(from var(--text-color-2) calc(l * 0.75) c h)
        );
        font-size: var(--font-size-xs);
        font-weight: 500;
        letter-spacing: 0.06em;
        line-height: 2.5;
        text-transform: uppercase;
    }

    :where(p, .p) {
        text-wrap: pretty;

        &.small {
            font-size: var(--font-size-md);
        }
        &.large {
            font-size: var(--font-size-lg);
        }
    }

    /* Inline text elements */
    :where(ins, u, abbr, dfn) {
        text-decoration: underline;
        text-underline-offset: 1px;

        @supports (-moz-appearance: none) {
            text-underline-offset: 2px;
        }
    }

    :where(abbr, dfn) {
        font-style: normal;
        text-decoration: var(--color-9) underline dotted;

        &[title] {
            cursor: help;
            text-underline-offset: 1px;
        }

        @supports (-moz-appearance: none) {
            text-underline-offset: 2px;
        }
    }

    :where(sup) {
        font-size: 0.5em;
    }

    :where(del, ins) {
        color: var(--color-9);
    }

    :where(small) {
        font-size: max(0.5em, var(--font-size-0, 0.75rem));
        max-inline-size: var(--size-content-1);
    }

    :where(cite) {
        font-style: italic;
    }

    /* Blockquote */
    :where(blockquote) {
        border-inline-start-width: var(--border-size-3);
        display: grid;
        gap: var(--size-3);
        padding-block: var(--size-3);
        padding-inline: var(--size-4);

        :first-child {
            margin-block-start: 0;
        }

        :last-child {
            margin-block-end: 0;
        }

        footer {
            color: var(--text-color-2);
        }
    }

    /* Code */
    :where(pre) {
        border-radius: 0.375rem;
        direction: ltr;
        font-size: 0.875rem;
        line-height: 1.7142857;
        margin-block: 1.7142857em;
        max-inline-size: max-content;
        min-inline-size: 0;
        padding-block: 0.8571429em;
        padding-inline: 1.1428571em;
        white-space: pre;
        writing-mode: lr;
    }

    :where(code, kbd, samp, pre) {
        font-family: var(--font-mono);
    }

    :where(code) {
        background-color: oklch(00 0 0 /18%);
        border-radius: var(--border-size-3);
        font-size: 0.9em;
        padding: 0.2ex 0.5ex;
    }

    :where(kbd, var) {
        background-color: var(--text-color-2);
        border-color: var(--text-color-2);
        border-radius: var(--border-radius, var(--radius-2));
        border-width: var(--border-size-1);
        color: var(--text-color-2-contrast);
        padding: calc(var(--size-1) / 2) var(--size-1);
    }

    :where(:not(pre) code, kbd) {
        word-break: break-word;
    }

    :where(:not(pre) code) {
        border-radius: var(--border-radius, var(--radius-2));
        padding: var(--size-1) var(--size-2);
        writing-mode: lr;
    }

    :where(mark) {
        border-radius: var(--border-radius, 0);
        box-decoration-break: clone;
        padding: calc(var(--size-1) / 2) var(--size-1);
        vertical-align: baseline;
    }

    /* Misc */
    :where(dt) {
        font-weight: 700;
    }

    :where(figure) {
        & > :where(figcaption) {
            font-size: var(--font-size-1, 1rem);
            text-wrap: balance;
        }
    }
}

/* ARTICLE CARD */
@layer components.base {
    :where(article) {
        --_bg-color: transparent;
        --_border-color: transparent;
        --_border-width: 0;
        --_shadow: none;

        background-color: var(--_bg-color);
        border-color: var(--_border-color);
        border-radius: var(--border-radius, 0.25rem);
        border-style: solid;
        border-width: var(--_border-width);
        box-shadow: var(--_shadow);
        display: flex;
        flex-direction: column;
        gap: var(--size-3);
        overflow: hidden;
        padding-inline: 0;

        /* Variants */
        &.text {
            --_bg-color: transparent;
            --_border-color: transparent;
            --_border-width: 0;
            --_shadow: none;
            padding-inline: 0;
        }

        &.tonal {
            --_bg-color: var(--surface-tonal);
            --_border-width: 1px;
        }

        &.elevated {
            --_bg-color: var(--surface-elevated);
            --_border-color: transparent;
            --_border-width: 0;
            --_shadow: var(--shadow-3);

            /* Adjust shadow in dark mode */
            @container style(--color-scheme: dark) {
                --_shadow: var(--shadow-4);
            }
        }

        &.outlined {
            --_bg-color: var(--surface-default);
            --_border-color: var(--border-color);
            --_border-width: 1px;
        }

        & > :where(hgroup, .content) {
            padding-inline: var(--size-3);
        }

        & > hgroup {
            padding-block: var(--size-3) 0;

            /* Top paragraph */
            & > p:first-of-type:first-child {
                line-height: 1.3;
            }

            /* Bottom paragraph */
            & > p:last-of-type:last-child:not(:first-child) {
                font-size: var(--font-size-1, 1rem);
            }
        }

        & > .content:where(:only-child, :first-child) {
            padding-block: var(--size-3) var(--size-4);
        }

        & > .actions {
            display: flex;
            gap: var(--size-1);
            margin-block: var(--size-2) 0;
            padding-block-end: var(--size-1);
            padding-inline: var(--size-1) var(--size-1);

            > button[type="submit"] {
                width: 100%;
                flex: 1;
            }
        }
    }
}

/* CHECKBOX */
@layer components.base {
    label:where(.checkbox, .radio) {
        align-items: center;
        color: var(--text-color-1);
        cursor: pointer;
        display: inline-grid;
        gap: 0 var(--size-2);
        grid-auto-columns: auto;
        grid-auto-flow: column;
        inline-size: fit-content;
        line-height: 1.5;
        transform: translateZ(0);
        user-select: none;

        /* Disabled */
        &:has([disabled]) {
            cursor: not-allowed;
            opacity: 0.64;
            user-select: none;

            input {
                cursor: not-allowed;
            }
        }

        /* Required dot */
        &:has([required]:not([type="checkbox"]:checked)) {
            .label:after {
                color: var(--red);
                content: "*";
                inset: 0 -0.25ex auto auto;
                position: absolute;
            }
        }

        /* Label */
        .label {
            font-size: var(--font-size-sm);
            grid-column: 2;
            grid-row: 1;
            position: relative;
            padding-inline: 0 1ex;
        }

        /* Supporting text */
        .supporting-text {
            color: var(--text-color-2);
            font-size: var(--font-size-xs);
            grid-column: 2;
            grid-row: 2;
            line-height: 1.5;
            z-index: 1;
        }

        /* Stacked layout */
        &.stack {
            justify-items: center;
            grid-auto-columns: unset;

            .label {
                grid-column: 1/-1;
                grid-row: 2;
                margin-block-start: var(--size-1);
                padding-inline: 1ex;

                /* Required dot */
                &::after {
                    inset: 0 -0.25ex auto auto;
                }
            }

            .supporting-text {
                grid-column: 1/-1;
                grid-row: 3;
            }
        }

        /* Input */
        input {
            aspect-ratio: 1;
            block-size: 1.125rem;
            cursor: pointer;
            inline-size: 1.125rem;

            &::before {
                --highlight-size: 175%;
            }
        }

        /* Sizes */
        &.small {
            input {
                block-size: var(--size-3);
                inline-size: var(--size-3);
            }
        }

        &.large {
            input {
                block-size: var(--size-4);
                inline-size: var(--size-4);
            }
        }

        /* Validation */
        &.error {
            input[type="checkbox"] {
                accent-color: var(--color-9);

                & ~ :where(.label, .supporting-text) {
                    color: var(--color-9);
                }
            }
        }

        /* Touch devices */
        @media (pointer: coarse) {
            input {
                block-size: var(--size-4);
                inline-size: var(--size-4);
            }
        }
    }
}

/* RADIO */
@layer components.base {
    label:where(.checkbox, .radio) {
        align-items: center;
        color: var(--text-color-1);
        cursor: pointer;
        display: inline-grid;
        gap: 0 var(--size-2);
        grid-auto-columns: auto;
        grid-auto-flow: column;
        inline-size: fit-content;
        line-height: 1.5;
        transform: translateZ(0);
        user-select: none;

        /* Disabled */
        &:has([disabled]) {
            cursor: not-allowed;
            opacity: 0.64;
            user-select: none;

            input {
                cursor: not-allowed;
            }
        }

        /* Required dot */
        &:has([required]:not([type="checkbox"]:checked)) {
            .label:after {
                color: var(--red);
                content: "*";
                inset: 0 -0.25ex auto auto;
                position: absolute;
            }
        }

        /* Label */
        .label {
            grid-column: 2;
            grid-row: 1;
            position: relative;
            padding-inline: 0 1ex;
        }

        /* Supporting text */
        .supporting-text {
            color: var(--text-color-2);
            font-size: var(--font-size-xs);
            grid-column: 2;
            grid-row: 2;
            line-height: 1.5;
            z-index: 1;
        }

        /* Stacked layout */
        &.stack {
            justify-items: center;
            grid-auto-columns: unset;

            .label {
                grid-column: 1/-1;
                grid-row: 2;
                margin-block-start: var(--size-1);
                padding-inline: 1ex;

                /* Required dot */
                &::after {
                    inset: 0 -0.25ex auto auto;
                }
            }

            .supporting-text {
                grid-column: 1/-1;
                grid-row: 3;
            }
        }

        /* Input */
        input {
            aspect-ratio: 1;
            block-size: 1.125rem;
            cursor: pointer;
            inline-size: 1.125rem;

            &::before {
                --highlight-size: 175%;
            }
        }

        /* Sizes */
        &.small {
            input {
                block-size: var(--size-3);
                inline-size: var(--size-3);
            }
        }

        &.large {
            input {
                block-size: var(--size-4);
                inline-size: var(--size-4);
            }
        }

        /* Validation */
        &.error {
            input[type="checkbox"] {
                accent-color: var(--color-9);

                & ~ :where(.label, .supporting-text) {
                    color: var(--color-9);
                }
            }
        }

        /* Touch devices */
        @media (pointer: coarse) {
            input {
                block-size: var(--size-4);
                inline-size: var(--size-4);
            }
        }
    }
}

/* RANGE */
@layer components.base {
    :where(.range > input[type="range"]) {
        --thumb-bg: var(--primary);
        --thumb-highlight-color: oklch(from var(--primary) 70% 100% h / 20%);
        --thumb-highlight-size: 0px;
        --thumb-offset: -1ex;
        --thumb-size: 3ex;
        --track-color: var(--field-border-color);
        --track-fill: 0%;
        --track-height: 1ex;

        appearance: none;
        background: transparent;
        display: block;
        inline-size: 100%;
        margin: 1ex 0 3ex;
        outline-offset: 1ex;

        @media (hover: none) {
            --thumb-offset: -14px;
            --thumb-size: 30px;
        }

        /* Track */
        &::-webkit-slider-runnable-track {
            appearance: none;
            background:
                linear-gradient(
                    to right,
                    transparent var(--track-fill),
                    var(--track-color) 0%
                ),
                var(--primary);
            block-size: var(--track-height);
            border-radius: 5ex;
            box-shadow: var(--inner-shadow-1);
        }

        &::-moz-range-track {
            appearance: none;
            background:
                linear-gradient(
                    to right,
                    transparent var(--track-fill),
                    var(--track-color) 0%
                ),
                var(--primary);
            block-size: var(--track-height);
            border-radius: 5ex;
            box-shadow: var(--inner-shadow-2);
        }

        /* Ring */
        &::-webkit-slider-thumb {
            appearance: none;
            background: var(--thumb-bg);
            block-size: var(--thumb-size);
            border-radius: 50%;
            border: 3px solid var(--surface-default);
            box-shadow: 0 0 0 var(--thumb-highlight-size)
                var(--thumb-highlight-color);
            cursor: ew-resize;
            inline-size: var(--thumb-size);
            margin-block-start: var(--thumb-offset);

            @media (prefers-reduced-motion: no-preference) {
                transition: box-shadow 0.1s ease;
            }

            .fieldset-item:focus-within & {
                border-color: var(--gray-14);
            }
        }

        &::-moz-range-thumb {
            appearance: none;
            background: var(--thumb-bg);
            block-size: var(--thumb-size);
            border-radius: 50%;
            border: 3px solid var(--primary);
            box-shadow: 0 0 0 var(--thumb-highlight-size)
                var(--thumb-highlight-color);
            cursor: ew-resize;
            inline-size: var(--thumb-size);
            margin-block-start: var(--thumb-offset);

            @media (prefers-reduced-motion: no-preference) {
                transition: box-shadow 0.1s ease;
            }

            .fieldset-item:focus-within & {
                border-color: var(--gray-14);
            }
        }

        /* Element state */
        &:not([disabled]) {
            &:hover {
                --thumb-highlight-size: var(--size-1);
            }

            &:active {
                --thumb-highlight-size: var(--size-2);
                --track-color: light-dark(
                    oklch(from var(--field-border-color) calc(l * 0.9) c h),
                    oklch(from var(--field-border-color) calc(l * 1.1) c h)
                );
            }
        }

        &[disabled] {
            --thumb-bg: oklch(from var(--text-color-1) l c h / 50%);
            --track-color: var(--field-border-color);

            cursor: not-allowed;

            &::-webkit-slider-thumb {
                cursor: not-allowed;
            }
            &::-moz-range-thumb {
                cursor: not-allowed;
            }
        }
    }
}

/* BAGDE */
@layer components.base {
    :where(.badge) {
        --_bg-color: var(--primary);
        --_border-color: var(--primary);
        --_color: var(--gray-1);
        --_inset-offset: 16px;
        --_inset: auto auto calc(100% - var(--_inset-offset))
            calc(100% - var(--_inset-offset));
        --_translate: 0;

        display: inline-flex;
        position: relative;

        &::after {
            background-color: var(--_bg-color);
            border: 2px solid var(--_border-color);
            border-radius: 100vmax;
            color: var(--_color);
            content: attr(aria-label);
            font-size: 12px;
            font-weight: 500;
            block-size: var(--size-4);
            line-height: normal;
            min-inline-size: var(--size-4, 1.125rem);
            padding-inline: var(--size-1);
            inset: var(--_inset);
            position: absolute;
            text-align: center;
            translate: var(--_translate);
            transition: opacity 0.2s var(--ease-out-1);
            inline-size: max-content;
        }

        /* Alignment */
        &.start-start {
            --_inset: auto calc(100% - var(--_inset-offset))
                calc(100% - var(--_inset-offset)) auto;
        }
        &.start-end {
            --_inset: auto auto calc(100% - var(--_inset-offset))
                calc(100% - var(--_inset-offset));
        }
        &.end-start {
            --_inset: calc(100% - var(--_inset-offset))
                calc(100% - var(--_inset-offset)) auto auto;
        }
        &.end-end {
            --_inset: calc(100% - var(--_inset-offset)) auto auto
                calc(100% - var(--_inset-offset));
        }

        /* Dot */
        &.dot {
            --_inset: 0 -1px auto auto;
            &::after {
                content: "";
                min-inline-size: var(--size-2);
                block-size: var(--size-2);
                inline-size: var(--size-2);
                padding: 0;
            }
        }

        /* Visibility */
        &.invisible {
            &::after {
                opacity: 0;
                pointer-events: none;
            }
        }

        /* Colors */
        &.error,
        &.good,
        &.ok,
        &.warning {
            --_bg-color: var(--color-8);
            --_border-color: var(--color-8);
        }
    }

    [dir="rtl"] {
        :where(.badge) {
            --_inset: auto calc(100% - 16px) calc(100% - 16px) auto;

            /* Alignment */
            &.start-start {
                --_inset: auto auto calc(100% - 16px) calc(100% - 16px);
            }
            &.start-end {
                --_inset: auto calc(100% - 16px) calc(100% - 16px) auto;
            }
            &.end-start {
                --_inset: calc(100% - 16px) auto auto calc(100% - 16px);
            }
            &.end-end {
                --_inset: calc(100% - 16px) calc(100% - 16px) auto auto;
            }
        }
    }
}

/* SWITCH */
@layer components.base {
    :where(.switch) {
        --_accent-color: var(--primary);
        --_accent-contrast: var(--primary-contrast);

        --_dot-bg-color: light-dark(var(--gray-11), var(--gray-14));
        --_dot-inset: var(--size-1) auto auto var(--size-1);
        --_dot-outline-size: 0;
        --_dot-size: var(--size-3);

        --_track-bg-color: light-dark(var(--gray-3), var(--gray-8));
        --_track-height: var(--size-5);
        --_track-width: var(--size-8);
        --_transition-tf: var(--ease-4);
        --_transition-time: 0.2s;

        align-items: center;
        color: var(--text-color-1);
        display: inline-grid;
        gap: 0 var(--size-2);
        grid-auto-columns: auto;
        grid-auto-flow: column;
        inline-size: fit-content;
        margin-inline-start: var(--size-2);

        input[type="checkbox"][role="switch"] {
            appearance: none;
            block-size: var(--_track-height);
            cursor: pointer;
            inline-size: var(--_track-width);
            margin: 0;
            position: relative;

            /* Track */
            &::before {
                background-color: var(--_track-bg-color);
                block-size: var(--_track-height);
                border: 1px solid var(--_dot-bg-color);
                border-radius: 100vmax;
                content: "";
                inline-size: var(--_track-width);
                inset: 0;
                position: absolute;
            }

            &:focus-visible {
                outline-offset: 2px;
                outline: 2px solid currentColor;
            }

            /* Dot */
            &::after {
                background-color: var(--_dot-bg-color);
                block-size: var(--_dot-size);
                border-radius: 100vmax;
                content: "";
                inline-size: var(--_dot-size);
                inset: var(--_dot-inset);
                outline-offset: -1px;
                outline: var(--_dot-outline-size) solid var(--_dot-bg-color);
                position: absolute;
            }

            /* Checked */
            &:checked {
                &::before {
                    background-color: var(--_accent-color);
                    border-color: var(--_accent-color);
                    transition:
                        background-color var(--_transition-time)
                            var(--_transition-tf),
                        border-color var(--_transition-time)
                            var(--_transition-tf);
                }

                /* Dot */
                &::after {
                    --_dot-bg-color: var(--_accent-contrast);
                    --_dot-outline-size: calc(var(--size-1) - 1px);

                    inset-inline-start: calc(
                        var(--_track-width) - var(--_dot-size) - var(--size-1)
                    );
                }
            }

            /* Animation */
            @media (prefers-reduced-motion: no-preference) {
                /* Track */
                &::before {
                    transition:
                        background-color var(--_transition-time)
                            var(--_transition-tf),
                        border-color var(--_transition-time)
                            var(--_transition-tf);
                }

                /* Dot */
                &::after {
                    transition: all var(--_transition-time)
                        var(--_transition-tf);
                }

                &:active:after {
                    --_dot-outline-size: calc(var(--size-1) + 1px);
                }

                &:checked {
                    &:active:after {
                        --_dot-outline-size: calc(var(--size-1) + 1px);
                    }
                }
            }
        }

        /* Required dot */
        &:has([required]:not(:checked)) {
            .label:after {
                color: var(--red);
                content: "*";
                inset: 0 -0.25ex auto auto;
                position: absolute;
            }
        }

        /* Disabled */
        &:has([disabled]) {
            cursor: not-allowed;
            opacity: 0.64;
            user-select: none;

            input {
                cursor: not-allowed;
            }
        }

        /* Label */
        .label {
            grid-column: 2;
            grid-row: 1;
            min-width: 0;
            padding-inline: 0 1ex;
            position: relative;
            user-select: none;
        }

        /* Supporting text */
        .supporting-text {
            color: var(--text-color-2);
            font-size: var(--font-size-xs);
            grid-column: 2;
            grid-row: 2;
            line-height: 1.5;
            z-index: 1;
        }

        /* Size */
        &.small {
            --_dot-size: 0.75rem;
            --_track-height: var(--size-4);
            --_track-width: 2.5rem;
        }

        /* Stacked layout */
        &.stack {
            justify-items: center;
            grid-auto-columns: unset;

            .label {
                grid-column: 1/-1;
                grid-row: 2;
                margin-block-start: var(--size-1);
                padding-inline: 1ex;
            }

            .supporting-text {
                grid-column: 1/-1;
                grid-row: 3;
            }
        }

        /* Validation */
        &.error {
            input {
                outline: 2px solid var(--color-9);
                border-radius: var(--radius-round);
            }

            .label,
            .supporting-text {
                color: var(--color-9);
            }
        }
    }
}

/* ACCORDION */
@layer components.has-deps {
    :where(details) {
        --_accordion-transition-time: 0.2s;
        --_bg-color: transparent;
        --_margin-inline: var(--size-1);
        --_shadow: none;

        background-color: var(--_bg-color);
        box-shadow: var(--_shadow);
        border-radius: var(--border-radius, 4px);
        display: block;
        margin-inline: var(--_margin-inline);
        transition: all var(--_accordion-transition-time) ease-out;

        /* Accordion animation */
        /* https://nerdy.dev/open-and-close-transitions-for-the-details-element */
        @media (prefers-reduced-motion: no-preference) {
            interpolate-size: allow-keywords;
        }

        &::details-content {
            block-size: 0;
            opacity: 0;
            overflow-y: clip;
            transition:
                content-visibility var(--_accordion-transition-time)
                    allow-discrete,
                opacity var(--_accordion-transition-time),
                block-size var(--_accordion-transition-time);
        }

        &[open]::details-content {
            block-size: auto;
            opacity: 1;
        }
        /***/

        & > summary {
            background-color: inherit;
            cursor: pointer;
            font-weight: 700;
            padding-block: var(--size-3);
            user-select: none;
        }

        /* Custom arrow */
        /* summary {
      align-items: center;
      background-color: inherit;
      cursor: pointer;
      display: flex;
      justify-content: space-between;
      list-style: none;
      padding-block: var(--size-3);
      user-select: none;

      &::marker,
      &::-webkit-details-marker {
        display: none;
      }

      svg {
        transition: rotate 0.2s ease-out;
      }
    }

    &[open] > summary svg {
      rotate: 180deg;
    } */

        & > .content {
            margin-block-start: 0;
            padding-block: var(--size-2) var(--size-3);
        }

        & > .actions {
            display: flex;
            gap: var(--size-1);
            justify-content: end;
            margin-block-start: var(--size-3);
            padding-block-end: var(--size-1);
            padding-inline: var(--size-3) var(--size-1);
        }

        /* Variants */
        &.card,
        &.text {
            --_bg-color: transparent;
            --_margin-inline: var(--size-1);
        }

        &.elevated {
            --_bg-color: var(--surface-elevated);
            --_margin-inline: 0;
            --_shadow: var(--shadow-2);
        }

        &.outlined {
            --_bg-color: var(--surface-default);
            --_margin-inline: 0;
            border: 1px solid var(--border-color);
        }

        &.tonal {
            --_bg-color: var(--surface-tonal);
            --_margin-inline: 0;
        }

        &:where(.elevated, .outlined, .tonal) > * {
            padding-inline: var(--size-3);
        }
    }

    /* Accordion group  */
    :where(.card:has(details)) {
        --_gutter-color: var(--border-color);

        display: block;

        & > .content {
            margin-block: 0;
            padding: 0;
        }

        &.card,
        &.text {
            &:not(.tonal, .outlined, .elevated) {
                summary {
                    padding-inline: 0;
                }
            }
        }

        details {
            --_margin-inline: 0;

            border: 0;
            box-shadow: none;

            & > * {
                padding-inline: var(--size-3);
            }

            /* Border between accordion items */
            & + & {
                summary {
                    border-radius: 0;
                    border-block-start: 1px solid var(--_gutter-color);
                }
            }

            /* First item */
            &:first-of-type {
                border-start-start-radius: var(--border-radius, 0.25rem);
                border-start-end-radius: var(--border-radius, 0.25rem);
                summary {
                    border-start-start-radius: var(--border-radius, 0.25rem);
                    border-start-end-radius: var(--border-radius, 0.25rem);
                }
            }

            /* Last item */
            &:last-of-type {
                border-end-start-radius: var(--border-radius, 0.25rem);
                border-end-end-radius: var(--border-radius, 0.25rem);
                summary {
                    border-end-start-radius: var(--border-radius, 0.25rem);
                    border-end-end-radius: var(--border-radius, 0.25rem);
                }
            }
        }
    }
}

/* BUTTON GROUP */
@layer components.has-deps {
    :where([role="group"].button-group) {
        --_border-radius: var(--button-border-radius);

        border-radius: var(--_border-radius);
        display: inline-flex;
        min-width: max-content;

        button {
            border-radius: 0;

            svg {
                max-inline-size: 0.7lh;
            }

            &:focus-visible {
                outline-offset: -4px;
            }

            & + & {
                border-inline-width: 1px;
                margin-inline-start: -1px;
            }

            &:first-of-type {
                border-bottom-left-radius: var(--_border-radius);
                border-top-left-radius: var(--_border-radius);
            }
            &:last-of-type {
                border-bottom-right-radius: var(--_border-radius);
                border-top-right-radius: var(--_border-radius);
            }

            /* Variants */
            &:not(:where(.tonal, .filled, .outlined)) {
                & + button {
                    border-inline-start: 1px solid var(--border-color);
                }
            }

            &:where(.tonal, .filled) {
                & + button {
                    border-inline-start-color: var(--color-7);
                }
            }

            &:where(.tonal, .filled, .elevated) {
                & + &[disabled] {
                    border-inline-start-color: color-mix(
                        in oklch,
                        var(--border-color) 90%,
                        white
                    );
                }
            }

            &:where(.elevated) {
                box-shadow: var(--shadow-1);

                button {
                    &:not(:hover) {
                        box-shadow: none;
                    }
                }
            }
        }
    }
}

/* PROGRESS */
@layer components.base {
    :where(progress) {
        --_accent-color: var(--primary);
        --_bg-color: var(--surface-tonal);

        appearance: none;
        background-color: var(--_bg-color);
        border-radius: var(--border-radius, 0.25rem);
        border: 0;
        display: inline-block;
        block-size: var(--size-1);
        overflow: hidden;
        position: relative;
        vertical-align: baseline;
        inline-size: 100%;

        &::-webkit-progress-bar {
            border-radius: var(--border-radius, 0.25rem);
            background: none;
        }

        &[value]::-webkit-progress-value {
            background-color: var(--_accent-color);

            @media (prefers-reduced-motion: no-preference) {
                transition: inline-size 0.2s
                    var(--ease-out-4, cubic-bezier(0, 0, 0.1, 1));
            }
        }

        &::-moz-progress-bar {
            background-color: var(--_accent-color);
        }
    }

    @media (prefers-reduced-motion: no-preference) {
        progress:indeterminate {
            background-color: var(--_bg-color);

            &::after {
                animation: indeterminate 2s linear infinite;
                background-color: var(--_accent-color);
                content: "";
                inset: 0 auto 0 0;
                position: absolute;
                will-change: inset-inline-start, inset-inline-end;
            }

            &[value]::-webkit-progress-value {
                background-color: transparent;
            }

            &::-moz-progress-bar {
                background-color: transparent;
            }
        }

        [dir="rtl"] {
            :where(progress):indeterminate {
                animation-direction: reverse;

                &::after {
                    animation-direction: reverse;
                }
            }
        }
    }

    @keyframes indeterminate {
        0% {
            left: -200%;
            right: 100%;
        }
        60% {
            left: 107%;
            right: -8%;
        }
        100% {
            left: 107%;
            right: -8%;
        }
    }
}

/* AVATAR */
@layer components.base {
    :where(.avatar) {
        --_bg-color: var(--color-8);
        --_color: var(--text-color-1);
        --_width: 40px;

        align-items: center;
        background-color: var(--_bg-color);
        color: var(--_color);
        aspect-ratio: 1;
        border-radius: 100vmax;
        display: inline-flex;
        inline-size: var(--_width);
        justify-content: center;
        overflow: clip;
        position: relative;
        text-align: center;
        text-decoration: none;

        &:has(img) {
            background-color: transparent;
        }

        svg {
            max-inline-size: var(--size-5);
        }

        img {
            block-size: 100%;
            inline-size: 100%;
            inset: 0;
            object-fit: cover;
            position: absolute;
        }

        &.button {
            transition: box-shadow 0.2s ease;
            cursor: pointer;

            &:hover {
                box-shadow: var(--shadow-1);
            }
            &:active {
                box-shadow: var(--inner-shadow-2);
            }
            &:focus-visible {
                outline-offset: -3px;
            }
        }

        &.squared {
            border-radius: 0;
        }

        &.rounded {
            border-radius: var(--border-size-3);
        }
    }

    /*
  TODO: implement reading-order if that becomes a thing.
  https://developer.chrome.com/blog/reading-order/
  */
    :where(.avatar-group) {
        --_margin: var(--size-1);

        display: flex;
        flex-direction: row-reverse;

        &.gap-small {
            --_margin: var(--size-2);
        }

        &.gap-x-small {
            --_margin: var(--size-3);
        }

        .avatar {
            margin-inline-end: calc(-1 * var(--_margin));
            outline: 2px solid var(--surface-default);
        }
    }
}

/* LIST */
@layer components.has-deps {
    :where(.list) {
        /* --_bg-color: light-dark(var(--gray-3), var(--gray-14)); */
        background-color: var(--_bg-color);
        list-style: none;
        padding: var(--size-2) 0;

        /* Push last item to bottom */
        &.push-last {
            display: flex;
            flex-direction: column;
            min-height: 100%;

            & > li:last-child {
                margin-top: auto;

                /* Fix for last item with border-top */
                &.border-top {
                    /* Add padding to compensate for the negative margin */
                    padding-top: calc(var(--size-2) + var(--size-3));
                    /* Adjust the before position */
                    &::before {
                        top: var(--size-2);
                    }
                }
            }
        }

        @media (pointer: coarse) {
            &,
            * {
                user-select: none;
            }
        }

        /* Borders on all list items */
        &.bordered {
            :where(li + li, option + option) {
                margin-block-start: var(--size-3);
                &::before {
                    block-size: 1px;
                    border-block-start: 1px solid var(--border-color);
                    content: "";
                    display: block;
                    inline-size: 100%;
                    inset: calc(-1 * var(--size-2)) 0 auto 0;
                    position: absolute;
                    visibility: visible; /* override select > option:before style */
                }
            }
        }

        /* Dense - less gaps and spacing */
        &.dense {
            :where(li, option) {
                gap: var(--size-2);
                min-block-size: var(--size-7);
                padding: var(--size-1) var(--size-2);

                &.border-top {
                    margin-block-start: var(--size-2);
                    &::before {
                        inset: calc(-1 * var(--size-1)) 0 auto 0;
                    }
                }

                /* Clickable list item */
                &:has(> a, > button, > label) {
                    min-block-size: auto;
                    padding: 0;
                }

                & > :where(a, button, label) {
                    gap: var(--size-2);
                    min-block-size: var(--size-7);
                    padding: var(--size-1) var(--size-2);
                }

                /* Checkbox / Radio */
                & > label {
                    .end {
                        padding-inline-end: 0.125rem;
                    }
                }

                /* Leading and trailing content */
                .start,
                .end {
                    .avatar {
                        max-inline-size: var(--size-6);
                    }

                    .icon-button,
                    svg {
                        max-inline-size: var(--size-4);
                    }

                    .checkbox,
                    .radio {
                        max-inline-size: var(--size-3);
                    }
                }
            }
        }

        /* Gutterless */
        &.gutterless {
            :where(li, option) {
                padding-inline: 0;

                & > :where(a, button, label) {
                    padding-inline: 0;
                }
            }
        }

        /* List item */
        :where(li, option, [role="group"] > label) {
            align-items: center;
            background: var(--_bg-color) var(--ripple, none);
            display: flex;
            font-size: var(--font-size-sm);
            gap: var(--size-3);
            isolation: isolate;
            min-block-size: 40px;
            padding: var(--size-2) var(--size-3);
            position: relative;

            &::before {
                display: none; /* removing checkmark from option */
            }

            * {
                font-size: inherit;
            }

            /* Clickable list item */
            &:has(> a, > button, > label) {
                background: transparent;
                display: block;
                min-block-size: auto;
                padding: 0;
            }

            /* Select option */
            &:where(option) {
                align-items: center;
                background-color: var(--_bg-color);
                color: inherit;
                cursor: pointer;
                display: flex;
                gap: var(--size-3);
                inline-size: 100%;
                margin: 0;
                min-block-size: 40px;
                padding: var(--size-2) var(--size-3);
                text-align: start;
                text-decoration: none;
                z-index: 0;

                &:hover {
                    background-color: light-dark(var(--gray-2), var(--gray-14));
                }

                &:checked {
                    background-color: oklch(from var(--primary) l c h / 30%);
                }
            }

            & > a,
            & > button,
            & > label {
                align-items: center;
                background: var(--_bg-color) var(--ripple, none);
                color: inherit;
                cursor: pointer;
                display: flex;
                gap: var(--size-3);
                inline-size: 100%;
                margin: 0;
                min-block-size: 40px;
                outline-offset: -3px;
                padding: var(--size-2) var(--size-3);
                text-align: start;
                text-decoration: none;
                z-index: 0;

                background-position: center;
                transition: background var(--button-ripple-duration);
                &:where(:not(:active):hover) {
                    --ripple: radial-gradient(
                            circle,
                            transparent 1%,
                            var(--_bg-color) 1%
                        )
                        center/15000%;
                }

                &:where(:hover:active) {
                    background-size: var(--button-ripple-size);
                    transition: background 0s;
                }

                &:hover {
                    background-color: light-dark(var(--gray-2), var(--gray-14));
                }

                &:has(.end:hover) {
                    &:where(:not(:active):hover) {
                        --ripple: none;
                    }
                }
            }

            /* Checkbox / Radio / Switch */
            & > label {
                .end {
                    padding-inline-end: var(--size-1);
                }

                &:where(.checkbox, .radio) {
                    inline-size: 100%;
                }

                &.switch {
                    --_dot-size: 0.75rem;
                    --_track-height: var(--size-4);
                    --_track-width: 2.5rem;
                }
            }

            /* Video */
            &:has(video) {
                padding: 0.75rem var(--size-3) 0.75rem 0;
            }

            /* Border between list items */
            &.border-top {
                margin-block-start: var(--size-3);
                &::before {
                    block-size: 1px;
                    border-block-start: 1px solid var(--border-color);
                    content: "";
                    display: block;
                    inline-size: 100%;
                    inset: calc(-1 * var(--size-2)) 0 auto 0;
                    position: absolute;
                }
            }

            /* Text */
            .text {
                flex: 1;
                line-height: 1.6;

                :where(h1, h2, h3, h4, h5, h6, p, span) {
                    color: inherit;
                    font-weight: 400;
                }

                p + p {
                    font-size: var(--font-size-xs);
                }
            }

            /* Leading content */
            .start {
                align-self: center;
                align-items: center;
                display: grid;
                z-index: 1;

                &:has(svg) {
                    max-inline-size: var(--size-5);
                }

                svg {
                    padding-block-start: 0.125rem;
                }

                img {
                    aspect-ratio: 1;
                    inline-size: 56px;
                    object-fit: cover;
                }

                video {
                    aspect-ratio: 16/9;
                    block-size: 64px;
                    object-fit: cover;
                }
            }

            /* Trailing content */
            .end {
                align-items: center;
                display: flex;
                font-size: var(--font-size-xs);
                text-align: end;
                z-index: 1;

                &:not(:has(a, button, input)) {
                    pointer-events: none;
                }

                kbd {
                    background-color: transparent;
                    border: 0;
                    color: inherit;
                    opacity: 0.6;
                }

                svg {
                    max-inline-size: var(--size-5);
                    inline-size: 100%;
                }
            }

            /* Inset */
            &.inset {
                .text {
                    padding-inline-start: calc(var(--size-5) + var(--size-3));
                }

                /* Safety measure so it won't look bad if there for some reason should exist a leading element inside. */
                .start {
                    display: none;
                }
            }
        }
    }
}

/* SELECT */
@layer components.has-deps {
    :where(.field > select) {
        position: relative;

        /* Default arrow */
        &::picker-icon {
            block-size: 0;
            border-block-start: 5px solid;
            border-inline: 5px solid transparent;
            color: currentColor;
            content: "";
            inline-size: 0;
            inset: 50% var(--size-3) auto auto;
            pointer-events: none;
            position: absolute;
            translate: 0 -50%;
        }

        &:open {
            &::picker-icon {
                rotate: 180deg;
            }
        }

        /* Select popover */
        &::picker(select) {
            /* Animation on-stage styles */
            border: 0;
            box-shadow: var(--shadow-2);
            opacity: 1;
            padding: 0;
            scale: 1;

            /* Animation starting styles */
            @starting-style {
                opacity: 0;
                transform: scale(0.9);
            }

            @media (prefers-reduced-motion: no-preference) {
                transition:
                    display 0.2s allow-discrete,
                    opacity 0.2s var(--ease-3),
                    overlay 0.2s allow-discrete,
                    scale 0.2s var(--ease-3);
            }
        }

        /* Animation off-stage styles */
        &:not(:open)::picker(select) {
            opacity: 0;
            scale: 0.9;
        }

        button {
            background-color: transparent;
            display: flex;
            inline-size: 100%;
            margin: 0;
            position: relative;

            selectedcontent {
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;
            }
        }

        .list {
            /* Groups */
            [role="group"] {
                label {
                    background-color: light-dark(var(--gray-3), var(--gray-13));
                    color: light-dark(
                        oklch(from var(--text-color-1) calc(l * 0.75) c h),
                        oklch(from var(--text-color-1) calc(l * 1.25) c h)
                    );
                    font-weight: 500;
                    overflow: hidden;
                    padding-inline: var(--size-2);
                    text-overflow: ellipsis;
                    white-space: nowrap;
                }

                &:not(:first-child),
                option:first-of-type {
                    margin-block-start: var(--size-2);
                }

                option:last-of-type,
                &:last-child {
                    option:last-of-type {
                        margin-block-end: 0;
                    }
                }
            }

            /* Option */
            option {
                /* Checkmark */
                /* TODO - checkmark should be the final version of the checkmark API. Follow the development of this and remove redundant psuedo stuff. */
                &::check {
                    display: none;
                }
                &::checkmark {
                    display: none;
                }
                &::before {
                    display: none;
                }

                &:focus-visible {
                    outline-offset: -1px;
                }
            }
        }
    }

    :where(.field:has(> select)) {
        /* Size */
        &.small {
            button {
                padding-block: var(--size-1);
                padding-inline: var(--size-2) var(--size-7);

                &::after {
                    inset-inline-end: var(--size-2);
                }
            }
        }

        /*
    * Non-experimental Select
    *
    * Hack to get the arrow working. Pseudo elements aren't allowed on the `<select>` element, so need to add it on the `.field` class instead. Noting this down if an `:after` element would be needed on a `.field`.
    */
        &:not(:has(button)) {
            select {
                appearance: none;
            }

            /* Arrow */
            &::after {
                align-self: center;
                block-size: 0;
                border-block-start: 5px solid;
                border-inline: 5px solid transparent;
                content: "";
                display: inline-block;
                flex-shrink: 0;
                grid-column: 1/-1;
                grid-row: 1;
                inline-size: 0;
                inset-inline-end: var(--size-3);
                justify-self: end;
                pointer-events: none;
                position: relative;
            }
        }
    }

    select:has(button),
    ::picker(select) {
        appearance: base-select;
    }
}

/* ALERT */
@layer components.has-deps {
    :where(.alert) {
        --_bg-color: var(--surface-tonal);
        --_border-color: var(--surface-tonal);
        --_color: var(--text-color-1);

        &.outlined {
            --_bg-color: var(--surface-default);
            --_border-color: var(--border-color);
            --_color: var(--text-color-1);
        }

        background-color: var(--_bg-color);
        border: 1px solid var(--_border-color);
        border-radius: var(--border-radius);
        color: var(--_color);
        padding: var(--size-3);

        & > .content {
            display: grid;
            gap: var(--size-2);
            font-size: var(--font-size-sm);

            h1,
            h2,
            h3,
            h4,
            h5,
            h6 {
                color: inherit;
                font-size: var(--font-size-md);
                font-weight: 600;

                * {
                    font-size: inherit;
                }
            }
        }

        /* Colors */
        &.error,
        &.ok,
        &.warning {
            --_bg-color: var(--color-4);
            --_border-color: var(--color-9);
            --_color: var(--color-15);

            &.outlined {
                --_bg-color: var(--surface-default);
                --_border-color: var(--color-9);
                --_color: light-dark(var(--color-15), var(--color-1));
            }

            svg {
                margin-block-start: 0.15rem;
                stroke: var(--color-9);
            }
        }

        /* Links
    * Can't make sure contrast will be acceptable (yet) so we use the current text color instead.
    */
        &:not(.outlined) {
            a[href] {
                color: inherit;

                &:hover {
                    color: var(--primary);
                }
            }
        }

        /* Icon */
        &:has(svg) {
            display: grid;
            gap: var(--size-3);
            grid-template-columns: var(--size-4) 1fr;

            svg {
                margin-block-start: 0.15rem;
                stroke: currentColor;
            }
        }
    }
}

/* TEXT AREA */
@layer components.has-deps {
    :where(.field:has(textarea)) {
        textarea {
            block-size: auto;
            field-sizing: content;
            min-block-size: 5rem;
            resize: vertical;
        }

        /* Size */
        &.small {
            textarea {
                min-block-size: var(--_height);
            }
        }

        /* Auto-fit */
        &.auto-fit {
            textarea {
                min-block-size: var(--_height);
                resize: both;
            }
        }
    }
}

/* TEXT FIELD */
@layer components.has-deps {
    :where(
        .field:has(
            :where(
                input[type="date"],
                input[type="datetime-local"],
                input[type="email"],
                input[type="month"],
                input[type="number"],
                input[type="password"],
                input[type="search"],
                input[type="tel"],
                input[type="text"],
                input[type="time"],
                input[type="url"],
                input[type="week"]
            )
        )
    ) {
        /* Sizes */
        &.small {
            input {
                padding-inline: var(--size-2);
            }
        }
    }

    /* Autosuggest */
    :where(.field:has(input[list])) {
        /* Hide native arrow */
        input::-webkit-calendar-picker-indicator {
            opacity: 0;
            position: absolute;
            cursor: pointer;
            pointer-events: none;
        }
    }
    :where(
        .field:has(input[list]:placeholder-shown),
        .field:has(input[list]):where(:focus-within, :hover)
    ) {
        /* Arrow */
        &::after {
            block-size: 0;
            border-block-start: 5px solid;
            border-inline: 5px solid transparent;
            content: "";
            display: inline-block;
            flex-shrink: 0;
            inline-size: 0;
            inset: 50% var(--size-3) auto auto;
            pointer-events: none;
            position: absolute;
            translate: 0 -50%;
        }
    }
}

/* FIELD MODIFIED grid with feedback*/
@layer components.has-deps {
    :where(.field) {
        --_accent-color: var(--primary);
        --_bg-color: var(--surface-tonal);
        --_border-color: var(--field-border-color);
        --_field-padding-block: 0.75rem;
        --_field-padding-inline: var(--size-2);
        --_height: var(--field-size);
        --_label-color: var(--text-color-2);
        --_supporting-text-color: var(--text-color-2);

        contain: layout;
        display: grid;
        grid-template-columns: 1fr auto;
        grid-template-rows: auto 1fr;
        gap: var(--size-1);
        position: relative;

        /* Label in first row, first column */
        .label {
            grid-row: 1;
            grid-column: 1;
            color: var(--_label-color);
            font-size: var(--font-size-sm);
            font-weight: 500;
            line-height: var(--font-lineheight-1);
            margin-inline: var(--size-1);
            margin-block-start: var(--size-1);
            white-space: nowrap;
        }

        /* Supporting text in first row, second column */
        .supporting-text {
            grid-row: 1;
            grid-column: 2;
            color: var(--_supporting-text-color);
            font-size: var(--font-size-xs);
            line-height: 1.5;
            margin-inline: var(--size-2);
            margin-block-start: var(--size-1);
        }

        /* Input/Select/Textarea in second row, spanning both columns */
        & input,
        & textarea,
        & select {
            grid-row: 2;
            grid-column: 1 / -1; /* Span from column 1 to the end */
            background-color: var(--_bg-color);
            block-size: var(--_height);
            border-radius: var(--field-border-radius);
            /* border: var(--field-border-width) solid var(--_border-color); */
            color: var(--text-color-1);
            font-family: var(--font-sans);
            font-size: var(--font-size-1);
            inline-size: 100%;
            line-height: var(--font-lineheight-1);
            min-inline-size: 0;
            padding: var(--_field-padding-block) var(--_field-padding-inline);
        }

        /* Submit button styling */
        & input[type="submit"],
        & button[type="submit"] {
            inline-size: 100%;
            cursor: pointer;

            &:hover:not(:disabled) {
                opacity: 0.9;
            }

            &:disabled {
                cursor: not-allowed;
                opacity: 0.6;
            }
        }

        /* Required indicator */
        &:has(:required) {
            .label::after {
                color: var(--red);
                content: "*";
                margin-inline-start: 0.25em;
            }
        }

        /* Invalid state - based on data attribute on any child */
        &:has([data-invalid]) {
            --_accent-color: var(--red);
            --_border-color: var(--red);
            --_supporting-text-color: var(--red);

            .label::after {
                content: "";
                display: inline-block;
                width: 16px;
                height: 16px;
                margin-inline-start: 0.25em;
                background-image: var(--icon-invalid);
                background-repeat: no-repeat;
                background-size: contain;
                background-position: center;
                vertical-align: text-bottom; /* Alternative alignment */
            }
        }

        /* Valid state - based on data attribute on any child */
        &:has([data-valid]) {
            .label::after {
                content: "";
                display: inline-block;
                width: 16px;
                height: 16px;
                margin-inline-start: 0.25em;
                background-image: var(--icon-valid);
                background-repeat: no-repeat;
                background-size: contain;
                background-position: center;
                vertical-align: text-bottom;
            }
        }

        /* Textarea adjustments */
        &:has(textarea) {
            textarea {
                block-size: auto;
                min-block-size: calc(var(--_height) * 2);
                resize: vertical;
            }
        }

        /* Select adjustments */
        &:has(select) {
            select {
                padding-inline-end: var(--size-8);
            }
        }

        /* File input adjustments */
        &:has(input[type="file"]) {
            cursor: pointer;

            input {
                cursor: inherit;
                padding: 0;

                &::-webkit-file-upload-button,
                &::file-selector-button {
                    background-color: var(--surface-tonal);
                    border: none;
                    block-size: calc(100% - var(--size-2) * 2);
                    border-radius: var(--field-border-radius);
                    cursor: pointer;
                    margin-block-start: var(--size-2);
                    margin-inline: var(--size-2) 1ex;
                }
            }
        }

        /* Color input adjustments */
        &:has(input[type="color"]) {
            input {
                appearance: none;
                background: none;
                overflow: hidden;
                padding: 0;

                &::-webkit-color-swatch {
                    border: none;
                }

                &::-webkit-color-swatch-wrapper {
                    padding: 0;
                }
            }
        }

        /* Autosuggest */
        &:has(input[list]) {
            input::-webkit-calendar-picker-indicator {
                opacity: 0;
                position: absolute;
                cursor: pointer;
                pointer-events: none;
            }
        }

        &:has(input[list]:placeholder-shown),
        &:where(:focus-within, :hover):has(input[list]) {
            &::after {
                block-size: 0;
                border-block-start: 5px solid;
                border-inline: 5px solid transparent;
                content: "";
                display: inline-block;
                inline-size: 0;
                inset: calc(var(--_height) / 2) var(--size-3) auto auto;
                pointer-events: none;
                position: absolute;
                translate: 0 -50%;
            }
        }

        /* Hover */
        &:hover:not(:has([disabled])):not(:has([data-invalid])) {
            :where(input, textarea, select) {
                border-color: var(--text-color-1);
            }
        }

        /* Focus */
        &:focus-within {
            :where(input, textarea, select) {
                border-color: var(--_accent-color);
                outline: 2px solid var(--_accent-color);
                outline-offset: -2px;
            }
        }

        /* Disabled */
        &:has([disabled]) {
            :where(input, textarea, select) {
                cursor: not-allowed;
                opacity: 0.7;
            }

            .label {
                opacity: 0.7;
            }
        }

        /* Read-only */
        &:has([readonly]) {
            :where(input, textarea, select) {
                cursor: not-allowed;
            }
        }

        /* Small */
        &.small {
            --_field-padding-block: var(--size-2);
            --_height: var(--field-size-small);

            &:has(input[type="file"]) {
                input {
                    font-size: var(--font-size-sm);

                    &::-webkit-file-upload-button,
                    &::file-selector-button {
                        block-size: calc(100% - var(--size-2));
                        margin-block-start: var(--size-1);
                    }
                }
            }
        }

        /* Auto-fit */
        &.auto-fit {
            inline-size: auto;

            :where(input, textarea) {
                field-sizing: content;
            }
        }
    }
}

/* Common styling for checkbox, radio and switch groups */
@layer components.has-deps {
    :where(fieldset.field-group) {
        border: 0;
        border-radius: 0;
        gap: 0;
        padding: 0;
        z-index: 1;

        legend {
            color: var(--text-color-2);
            font-size: var(--font-size-sm);
            padding: 0 1ex 0 0;
            margin-inline: var(--size-1);
            margin-block-start: var(--size-1);
            white-space: nowrap;
        }

        /* Disabled */
        &[disabled] {
            cursor: not-allowed;
            opacity: 0.64;
            user-select: none;

            input {
                cursor: not-allowed;
            }
        }

        /* Validation */
        &.error {
            legend,
            .supporting-text {
                color: var(--color-9);
            }
        }

        /* Required */
        &:has([required]) {
            &:not(
                :has(input:where([type="radio"], [type="checkbox"]):checked)
            ) {
                legend {
                    position: relative;

                    &::after {
                        color: var(--red);
                        content: "*";
                        inset: 0 -0.25ex auto auto;
                        position: absolute;
                    }
                }
            }
        }
        :where(.radio, .checkbox, .switch) .label:after {
            display: none;
        }

        /* Supporting text */
        .supporting-text {
            color: var(--text-color-2);
            font-size: var(--font-size-xs);
            line-height: var(--font-lineheight-0);
            z-index: 1;
        }

        /* Fields */
        .fields {
            display: flex;
            flex-direction: column;
            gap: var(--size-2);

            /* * ~ & { padding: var(--size-2) 0; } */
        }

        :last-child {
            padding-block-end: 0;
        }

        /* Directions */
        &.row {
            .fields {
                flex-direction: row;
            }
        }
    }
}

/* MAIN LAYOUT */
@layer layout.desktop {
    body {
        --padding-size: var(--size-fluid-0);
        --gap-size: var(--size-fluid-0);
        --border-radius: var(--size-fluid-1);

        position: fixed;
        inset: 0;
        width: 100%;
        height: 100svh;
        overflow: hidden;
        overscroll-behavior: none;
        display: grid;
        grid-template:
            "header header header" auto
            "nav main aside" 1fr
            "footer footer footer" auto
            / auto 1fr auto;
        padding: var(--padding-size);
        margin-inline: auto; /* allows for easy centering */

        .ultrawide {
            width: min(100%, 1200px);
        }

        /* Generic styles for all direct children */
        > main,
        > header,
        > nav,
        > aside,
        > footer {
            display: grid;
            grid-template:
                "header header header" auto
                "nav main aside" 1fr
                "footer footer footer" auto
                / auto 1fr auto;
            min-height: 0;
            /* scrollbar-gutter: stable both-edges; */

            &:where(:not([popover="auto"])) {
                border-radius: var(--border-radius);
                overflow: hidden; /* Add this to clip children */
            }

            &:empty {
                display: none;
                scrollbar-gutter: unset;
            }

            /* Generic styles for all grandchildren */
            > main,
            > header,
            > nav,
            > aside,
            > footer {
                &:empty {
                    scrollbar-gutter: unset;
                }
            }

            > header {
                grid-area: header;
                /* margin-bottom: var(--gap-size); */
            }

            > nav {
                grid-area: nav;
                /* margin-right: var(--gap-size); */
                overflow-y: auto;
            }

            > main {
                grid-area: main;
                overflow: auto;
                min-height: 0;
            }

            > aside {
                grid-area: aside;
                /* margin-left: var(--gap-size); */
                overflow-y: auto;
            }

            > footer {
                grid-area: footer;
                /* margin-top: var(--gap-size); */
            }
        }

        /* Header specific styles */
        > header {
            grid-area: header;
            margin-bottom: var(--gap-size);
            > aside {
                place-items: center;
                grid-auto-flow: column;
                display: inline-grid;
                column-gap: var(--size-3);
            }
            > main {
                place-items: center;
                grid-auto-flow: column;
                display: inline-grid;
                column-gap: var(--size-3);
            }
            > nav {
                place-items: center;
                grid-auto-flow: column;
                display: inline-grid;
                column-gap: var(--size-3);
            }
        }

        /* Nav specific styles */
        > nav {
            grid-area: nav;
            margin-right: var(--gap-size);
            background-color: var(--surface-hue);
        }

        /* Main specific styles */
        > main {
            grid-area: main;
            background-color: var(--surface-tonal);
        }

        /* Aside specific styles */
        > aside {
            grid-area: aside;
            margin-left: var(--gap-size);
            background-color: var(--surface-hue);
        }

        /* Footer specific styles */
        > footer {
            grid-area: footer;
            margin-top: var(--gap-size);
            scrollbar-gutter: auto;
        }
    }
}

/* PRINT STYLES - Adapt main viewport to paper */
@layer layout.print {
    /* PRINT STYLES - Simple adaptation to paper */
    @media print {
        /* Hide top-level navigation elements (keep only main) */
        body > header,
        body > nav,
        body > aside,
        body > footer {
            display: none !important;
        }

        /* Reset body to use paper as viewport */
        body {
            position: static !important;
            width: auto !important;
            height: auto !important;
            overflow: visible !important;
            display: block !important;
            padding: 0 !important;
            margin: 0 !important;
        }

        /* Let main content fill the page naturally */
        body > main {
            position: static !important;
            width: 100% !important;
            height: 100vh !important;
            overflow: visible !important;
            margin: 0 !important;
            padding: 0 !important; /* Fixed: removed space before ! */
        }

        /* Page setup - no margins */
        @page {
            size: letter;
            margin: 0; /* Removed margins completely */
        }

        /* Override all font sizes for print to be much smaller */
        * {
            box-shadow: none !important;
            text-shadow: none !important;
        }

        /* Print-specific font size overrides */
        h1 {
            font-size: 14pt !important;
            line-height: 1.2 !important;
        }

        h2 {
            font-size: 12pt !important;
            line-height: 1.2 !important;
        }

        h3 {
            font-size: 11pt !important;
            line-height: 1.2 !important;
        }

        h4 {
            font-size: 10pt !important;
            line-height: 1.2 !important;
        }

        h5 {
            font-size: 9pt !important;
            line-height: 1.2 !important;
        }

        h6 {
            font-size: 8pt !important;
            line-height: 1.2 !important;
        }

        /* Body text and paragraphs */
        p,
        div,
        span,
        li,
        td,
        th {
            font-size: 10pt !important;
            line-height: 1.3 !important;
        }

        /* Small text elements */
        small,
        .text-sm,
        .font-size-sm {
            font-size: 8pt !important;
            line-height: 1.2 !important;
        }

        /* Extra small text */
        .text-xs,
        .font-size-xs {
            font-size: 7pt !important;
            line-height: 1.1 !important;
        }

        /* Large text */
        .text-lg,
        .font-size-lg {
            font-size: 12pt !important;
            line-height: 1.3 !important;
        }

        /* Code elements */
        code,
        pre,
        kbd,
        samp {
            font-size: 9pt !important;
            line-height: 1.2 !important;
        }

        /* Override any custom font size classes that might exist */
        [class*="font-size"],
        [class*="text-"] {
            font-size: 10pt !important;
        }

        /* Override CSS custom properties for print */
        :root {
            --font-size-h1: 14pt !important;
            --font-size-h2: 12pt !important;
            --font-size-h3: 11pt !important;
            --font-size-h4: 10pt !important;
            --font-size-h5: 9pt !important;
            --font-size-h6: 8pt !important;
            --font-size-lg: 12pt !important;
            --font-size-md: 10pt !important;
            --font-size-sm: 8pt !important;
            --font-size-xs: 7pt !important;
        }
    }
}

/* SEMANTIC NAV BAR */
@layer components.base {
    /* Base navigation styles - sidebar variant */
    :where(nav.navbar) {
        padding: var(--size-2);

        > :where(main) {
            scrollbar-gutter: auto;
        }

        > :where(main, header, footer) > ul {
            list-style: none;
            /* padding: 0;
            margin: 0; */
            display: flex;
            flex-direction: column;
            height: 100%;

            > li {
                position: relative;
                transition: all 0.3s ease;

                + li {
                    margin-top: var(--size-0);
                }

                > a {
                    align-items: center;
                    display: flex;
                    font-size: var(--font-size-sm);
                    gap: var(--size-3);
                    min-block-size: 40px;
                    padding: var(--size-2) var(--size-3);
                    width: 100%;
                    color: inherit;
                    text-decoration: none;
                    cursor: pointer;
                    transition: all 0.3s ease;

                    &:hover {
                        background-color: light-dark(
                            var(--gray-2),
                            var(--gray-14)
                        );
                        border-radius: var(--radius-2);
                    }

                    &:focus-visible {
                        outline: 2px solid var(--accent);
                        outline-offset: -2px;
                    }

                    @media (prefers-reduced-motion: no-preference) {
                        &:focus {
                            transition: outline-offset 0.25s ease;
                        }
                        &:focus:not(:active) {
                            outline-offset: 5px;
                        }
                    }

                    &[aria-current="page"] {
                        background-color: light-dark(
                            var(--gray-11),
                            var(--gray-4)
                        );
                        color: light-dark(var(--color-5), var(--color-9));

                        /* Option 1: Rounded corners with left border accent */
                        border-radius: var(--radius-2);
                        border-left: 3px solid
                            light-dark(var(--accent), var(--accent-light));

                        /* Optional: Add subtle shadow for more polish */
                        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);

                        &:hover {
                            background-color: light-dark(
                                var(--gray-11),
                                var(--gray-4)
                            );
                            border-radius: var(--radius-2);
                        }
                    }

                    & > svg {
                        align-self: center;
                        max-inline-size: var(--size-5);
                        padding-block-start: 0.125rem;
                        transition: all 0.3s ease;
                    }

                    & > p {
                        flex: 1;
                        line-height: 1.6;
                        color: inherit;
                        font-weight: inherit;
                        transition: all 0.3s ease;
                        margin: 0;
                    }

                    & > div {
                        align-items: center;
                        display: flex;
                        font-size: var(--font-size-xs);
                        text-align: end;
                        transition: opacity 0.3s ease;
                    }
                }
            }
        }
    }

    /* Toolbar navigation variant */
    :where(nav.toolbar) {
        padding: var(--size-2);

        > :where(main) {
            scrollbar-gutter: auto;
        }

        /* Apply to main, header, and footer containers */
        > :where(main, header, footer) > ul {
            list-style: none;
            display: flex;
            flex-direction: column;
            height: 100%;

            > li {
                position: relative;
                transition: all 0.3s ease;

                + li {
                    margin-top: var(--size-0);
                }

                > a {
                    align-items: center;
                    display: flex;
                    flex-direction: column;
                    justify-content: center;
                    text-align: center;
                    font-size: var(--font-size-sm);
                    gap: var(--size-1);
                    min-block-size: 60px;
                    padding: var(--size-2);
                    width: 100%;
                    color: inherit;
                    text-decoration: none;
                    cursor: pointer;
                    transition: all 0.3s ease;

                    &:hover {
                        background-color: light-dark(
                            var(--gray-2),
                            var(--gray-14)
                        );
                        border-radius: var(--radius-2);
                    }

                    &:focus-visible {
                        outline: 2px solid var(--accent);
                        outline-offset: -2px;
                    }

                    @media (prefers-reduced-motion: no-preference) {
                        &:focus {
                            transition: outline-offset 0.25s ease;
                        }
                        &:focus:not(:active) {
                            outline-offset: 5px;
                        }
                    }

                    &[aria-current="page"] {
                        background-color: light-dark(
                            var(--gray-11),
                            var(--gray-4)
                        );
                        color: light-dark(var(--color-5), var(--color-9));

                        /* Adjust border for toolbar layout */
                        border-radius: var(--radius-2);
                        border-left: none;
                        border-bottom: 3px solid
                            light-dark(var(--accent), var(--accent-light));

                        /* Optional: Add subtle shadow for more polish */
                        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);

                        &:hover {
                            background-color: light-dark(
                                var(--gray-11),
                                var(--gray-4)
                            );
                            border-radius: var(--radius-2);
                        }
                    }

                    & > svg {
                        align-self: center;
                        max-inline-size: var(--size-5);
                        padding-block-start: 0;
                        transition: all 0.3s ease;
                    }

                    & > p {
                        flex: 1;
                        line-height: 1.2;
                        color: inherit;
                        font-weight: inherit;
                        font-size: var(--font-size-xs);
                        transition: all 0.3s ease;
                        margin: 0;
                    }

                    /* Hide end content in toolbar mode */
                    & > div {
                        display: none;
                    }
                }
            }
        }
    }
}

/* Utility Class Crutches try not to use to much.. */
@layer extra {
    :is(
            [class*="--cluster"],
            [class*="--flank"],
            [class*="--frame"],
            [class*="--grid"],
            [class*="--split"],
            [class*="--flex"]
        )
        > * {
        margin-block: 0;
        margin-inline: 0;
    }
    :where(
        [class*="--cluster"],
        [class*="--flank"],
        [class*="--frame"],
        [class*="--grid"],
        [class*="--stack"],
        [class*="--split"],
        [class*="--flex"]
    ) {
        gap: var(--size-1);
    }

    :where([class*="--cluster"]) {
        display: flex;
        flex-wrap: wrap;
        justify-content: flex-start;
        align-items: center;
    }
    :where([class*="--flank"]) {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        --content-percentage: initial;
        --flank-size: initial;
    }
    :where([class*="--flank"]:not([class*="\:end"]) > :first-child),
    :where([class*="--flank"][class*="\:start"] > :first-child) {
        flex-basis: var(--flank-size, auto);
        flex-grow: 1;
    }
    :where([class*="--flank"]:not([class*="\:end"]) > :last-child),
    :where([class*="--flank"][class*="\:start"] > :last-child) {
        flex-basis: 0;
        flex-grow: 999;
        min-inline-size: var(--content-percentage, 50%);
    }
    :where([class*="--flank"][class*="\:end"] > :last-child) {
        flex-basis: var(--flank-size, auto);
        flex-grow: 1;
    }
    :where([class*="--flank"][class*="\:end"] > :first-child) {
        flex-basis: 0;
        flex-grow: 999;
        min-inline-size: var(--content-percentage, 50%);
    }
    :where([class*="--frame"]) {
        display: flex;
        aspect-ratio: 1 / 1;
        justify-content: center;
        align-items: center;
        overflow: hidden;
    }
    :where([class*="--frame"] > img),
    :where([class*="--frame"] > video) {
        block-size: 100%;
        inline-size: 100%;
        object-fit: cover;
    }
    :where([class*="--frame"][class*="\:square"]) {
        aspect-ratio: 1 / 1;
    }
    :where([class*="--frame"][class*="\:landscape"]) {
        aspect-ratio: 16 / 9;
    }
    :where([class*="--frame"][class*="\:portrait"]) {
        aspect-ratio: 9 / 16;
    }
    :where([class*="--grid"]) {
        display: grid;
        grid-template-columns: repeat(
            auto-fit,
            minmax(min(var(--min-column-size, 20ch), 100%), 1fr)
        );
        --min-column-size: initial;
    }
    :where([class*="--span-grid"]) {
        grid-column: 1 / -1;
    }
    :where([class*="--split"]) {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        align-items: center;
    }
    :where([class*="--split"]),
    :where([class*="--split"][class*="\:row"]) {
        flex-direction: row;
        block-size: auto;
        inline-size: 100%;
    }
    :where([class*="--split"]:not([class*="\:column"]) > :first-child) {
        flex: 0 1 auto;
    }
    :where([class*="--split"][class*="\:column"]) {
        flex-direction: column;
        block-size: auto;
        inline-size: auto;
        align-self: stretch;
    }
    :where([class*="--stack"]) {
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: stretch;
    }
    :where([class*="--flex"]) {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
    }
    :where([class*="--flex"]),
    :where([class*="--flex"][class*="\:row"]) {
        flex-direction: row;
        block-size: auto;
        inline-size: 100%;
    }
    :where([class*="--flex"][class*="\:column"]) {
        flex-direction: column;
        block-size: auto;
        inline-size: auto;
        align-self: stretch;
        align-items: stretch;
    }
    /* New :end modifier for --flex */
    :where([class*="--flex"][class*="\:end"]) {
        justify-content: flex-end;
    }

    .icon-button {
        transition: transform 0.3s ease; /* This handles BOTH directions */
    }

    .trimmed > * {
        text-box: trim-both cap alphabetic;
    }

    /* Plain class for monospace legal document styling */
    .plain {
        /* Typography */
        font-family:
            "SF Mono", Monaco, "Cascadia Code", "Roboto Mono", Consolas,
            "Courier New", monospace;
        font-size: var(--font-size-xs);
        line-height: var(--font-lineheight-00);
        text-box: trim-both cap alphabetic;
        color: var(--text-color-1);
        margin-inline: auto;

        /* Layout */
        max-width: 86ch;

        /* Reset any inherited styles */
        font-weight: normal;
        text-decoration: none;
        text-transform: none;
        letter-spacing: normal;

        /* Legal document styling */
        white-space: pre-wrap;
        word-wrap: break-word;

        /* Ensure good readability */
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;

        /* All text elements use monospace */
        & * {
            font-family: inherit;
            font-weight: inherit;
        }
    }
}
